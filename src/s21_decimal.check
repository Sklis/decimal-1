#include "s21_decimal.h"
#define SIZE_OF_DECIMAL 16

#test is_less_0
s21_decimal val1 = {0};
s21_decimal val2 = {0};
ck_assert_int_eq(0, s21_is_less(val1, val2));

#test is_less_1
s21_decimal val1 = {0};
s21_decimal val2 = {0};
val1.bits[0] = 255;
val2.bits[0] = 256;
ck_assert_int_eq(1, s21_is_less(val1, val2));

#test is_less_2
s21_decimal val1 = {0};
s21_decimal val2 = {0};
val1.bits[0] = 256;
val2.bits[0] = 256;
ck_assert_int_eq(0, s21_is_less(val1, val2));

#test is_less_3
s21_decimal val1 = {0};
s21_decimal val2 = {0};
val1.bits[0] = 257;
val2.bits[0] = 256;
ck_assert_int_eq(0, s21_is_less(val1, val2));

#test is_less_4
s21_decimal val1 = {0};
s21_decimal val2 = {0};
set_sign(&val1, 1);
ck_assert_int_eq(1, s21_is_less(val1, val2));

#test is_less_5
s21_decimal val1 = {0};
s21_decimal val2 = {0};
val1.bits[0] = 257;
val2.bits[0] = 257;
val1.bits[2] = 256;
val2.bits[2] = 257;
set_exp(&val1, 11);
set_exp(&val2, 10);
ck_assert_int_eq(1, s21_is_less(val1, val2));

#test is_less_6
s21_decimal val1 = {0};
s21_decimal val2 = {0};
val1.bits[0] = 257;
val2.bits[0] = 257;
val1.bits[2] = 256;
val2.bits[2] = 257;
set_exp(&val1, 10);
set_exp(&val2, 11);
ck_assert_int_eq(0, s21_is_less(val1, val2));

#test is_less_7
s21_decimal val1 = {0};
s21_decimal val2 = {0};
val2.bits[2] = 257;
set_sign(&val1, 1);
set_sign(&val2, 1);
ck_assert_int_eq(0, s21_is_less(val1, val2));

#test is_less_8
s21_decimal val1 = {0};
s21_decimal val2 = {0};
set_sign(&val1, 1);
set_sign(&val2, 1);
set_bits(&val1, 83, 1);
set_exp(&val1, 12);
set_exp(&val2, 11);
ck_assert_int_eq(1, s21_is_less(val1, val2));

#test is_less_9
s21_decimal val1 = {0};
s21_decimal val2 = {0};
set_sign(&val1, 1);
set_sign(&val2, 1);
set_bits(&val1, 83, 1);
set_bits(&val2, 83, 1);
set_exp(&val1, 10);
set_exp(&val2, 11);
ck_assert_int_eq(1, s21_is_less(val1, val2));

#test is_less_10
s21_decimal val1 = {0};
s21_decimal val2 = {0};
set_sign(&val1, 1);
set_sign(&val2, 1);
set_bits(&val1, 83, 1);
set_exp(&val1, 10);
set_exp(&val2, 10);
ck_assert_int_eq(1, s21_is_less(val1, val2));

#test is_less_11
s21_decimal val1 = {0};
s21_decimal val2 = {0};
set_sign(&val1, 1);
set_sign(&val2, 1);
set_bits(&val1, 83, 1);
ck_assert_int_eq(1, s21_is_less(val1, val2));

#test is_less_12
s21_decimal val1 = {0};
s21_decimal val2 = {0};
set_sign(&val1, 1);
set_sign(&val2, 0);
ck_assert_int_eq(1, s21_is_less(val1, val2));

#test is_greater_0
s21_decimal val1 = {0};
s21_decimal val2 = {0};
ck_assert_int_eq(0, s21_is_greater(val1, val2));

#test is_greater_1
s21_decimal val1 = {0};
s21_decimal val2 = {0};
val1.bits[0] = 255;
val2.bits[0] = 256;
ck_assert_int_eq(0, s21_is_greater(val1, val2));

#test is_greater_2
s21_decimal val1 = {0};
s21_decimal val2 = {0};
val1.bits[0] = 256;
val2.bits[0] = 256;
ck_assert_int_eq(0, s21_is_greater(val1, val2));

#test is_greater_3
s21_decimal val1 = {0};
s21_decimal val2 = {0};
val1.bits[0] = 257;
val2.bits[0] = 256;
ck_assert_int_eq(1, s21_is_greater(val1, val2));

#test is_greater_4
s21_decimal val1 = {0};
s21_decimal val2 = {0};
set_sign(&val1, 1);
ck_assert_int_eq(0, s21_is_greater(val1, val2));

#test is_greater_5
s21_decimal val1 = {0};
s21_decimal val2 = {0};
val1.bits[0] = 257;
val2.bits[0] = 257;
val1.bits[2] = 256;
val2.bits[2] = 257;
set_exp(&val1, 11);
set_exp(&val2, 10);
ck_assert_int_eq(0, s21_is_greater(val1, val2));

#test is_greater_6
s21_decimal val1 = {0};
s21_decimal val2 = {0};
val1.bits[0] = 257;
val2.bits[0] = 257;
val1.bits[2] = 256;
val2.bits[2] = 257;
set_exp(&val1, 10);
set_exp(&val2, 11);
ck_assert_int_eq(1, s21_is_greater(val1, val2));

#test is_greater_7
s21_decimal val1 = {0};
s21_decimal val2 = {0};
val2.bits[2] = 257;
set_sign(&val1, 1);
set_sign(&val2, 1);
ck_assert_int_eq(1, s21_is_greater(val1, val2));

#test is_greater_8
s21_decimal val1 = {0};
s21_decimal val2 = {0};
val2.bits[2] = 257;
set_sign(&val1, 1);
set_sign(&val2, 0);
ck_assert_int_eq(0, s21_is_greater(val1, val2));

#test is_greater_or_equal_0
s21_decimal val1 = {0};
s21_decimal val2 = {0};
ck_assert_int_eq(0, s21_is_greater(val1, val2));

#test is_greater_or_equal_1
s21_decimal val1 = {0};
s21_decimal val2 = {0};
val1.bits[0] = 255;
val2.bits[0] = 256;
ck_assert_int_eq(0, s21_is_greater_or_equal(val1, val2));

#test is_greater_or_equal_2
s21_decimal val1 = {0};
s21_decimal val2 = {0};
val1.bits[0] = 256;
val2.bits[0] = 256;
ck_assert_int_eq(1, s21_is_greater_or_equal(val1, val2));

#test is_greater_or_equal_3
s21_decimal val1 = {0};
s21_decimal val2 = {0};
val1.bits[0] = 257;
val2.bits[0] = 256;
ck_assert_int_eq(1, s21_is_greater_or_equal(val1, val2));

#test is_greater_or_equal_4
s21_decimal val1 = {0};
s21_decimal val2 = {0};
set_bits(&val1, 1, 127);
ck_assert_int_eq(1, s21_is_greater_or_equal(val1, val2));

#test is_greater_or_equal_5
s21_decimal val1 = {0};
s21_decimal val2 = {0};
val1.bits[0] = 257;
val2.bits[0] = 257;
val1.bits[2] = 256;
val2.bits[2] = 257;
set_exp(&val1, 11);
set_exp(&val2, 10);
ck_assert_int_eq(0, s21_is_greater_or_equal(val1, val2));

#test is_greater_or_equal_6
s21_decimal val1 = {0};
s21_decimal val2 = {0};
val1.bits[0] = 257;
val2.bits[0] = 257;
val1.bits[2] = 256;
val2.bits[2] = 257;
set_exp(&val1, 10);
set_exp(&val2, 11);
ck_assert_int_eq(1, s21_is_greater_or_equal(val1, val2));

#test is_greater_or_equal_7
s21_decimal val1 = {0};
s21_decimal val2 = {0};
val2.bits[2] = 257;
set_sign(&val1, 1);
set_sign(&val2, 1);
ck_assert_int_eq(1, s21_is_greater_or_equal(val1, val2));

#test is_less_or_equal_0
s21_decimal val1 = {0};
s21_decimal val2 = {0};
ck_assert_int_eq(1, s21_is_less_or_equal(val1, val2));

#test is_less_or_equal_1
s21_decimal val1 = {0};
s21_decimal val2 = {0};
val1.bits[0] = 255;
val2.bits[0] = 256;
ck_assert_int_eq(1, s21_is_less_or_equal(val1, val2));

#test is_less_or_equal_2
s21_decimal val1 = {0};
s21_decimal val2 = {0};
val1.bits[0] = 256;
val2.bits[0] = 256;
ck_assert_int_eq(1, s21_is_less_or_equal(val1, val2));

#test is_less_or_equal_3
s21_decimal val1 = {0};
s21_decimal val2 = {0};
val1.bits[0] = 257;
val2.bits[0] = 256;
ck_assert_int_eq(0, s21_is_less_or_equal(val1, val2));

#test is_less_or_equal_4
s21_decimal val1 = {0};
s21_decimal val2 = {0};
set_sign(&val1, 1);
ck_assert_int_eq(1, s21_is_less_or_equal(val1, val2));

#test is_less_or_equal_5
s21_decimal val1 = {0};
s21_decimal val2 = {0};
val1.bits[0] = 257;
val2.bits[0] = 257;
val1.bits[2] = 256;
val2.bits[2] = 257;
set_exp(&val1, 11);
set_exp(&val2, 10);
ck_assert_int_eq(1, s21_is_less_or_equal(val1, val2));

#test is_less_or_equal_6
s21_decimal val1 = {0};
s21_decimal val2 = {0};
val1.bits[0] = 257;
val2.bits[0] = 257;
val1.bits[2] = 256;
val2.bits[2] = 257;
set_exp(&val1, 10);
set_exp(&val2, 11);
ck_assert_int_eq(0, s21_is_less_or_equal(val1, val2));

#test is_less_or_equal_7
s21_decimal val1 = {0};
s21_decimal val2 = {0};
val2.bits[2] = 257;
set_sign(&val1, 1);
set_sign(&val2, 1);
ck_assert_int_eq(0, s21_is_less_or_equal(val1, val2));

#test is_equal_0
s21_decimal val1 = {0};
s21_decimal val2 = {0};
set_sign(&val1, 1);
set_sign(&val2, 0);
ck_assert_int_eq(1, s21_is_equal(val1, val2));

#test is_equal_1
s21_decimal val1 = {0};
s21_decimal val2 = {0};
set_bits(&val2, 3, 1);
ck_assert_int_eq(0, s21_is_equal(val1, val2));

#test is_equal_2
s21_decimal val1 = {0};
s21_decimal val2 = {0};
set_sign(&val2, 1);
set_bits(&val1, 33, 1);
set_bits(&val2, 33, 1);
ck_assert_int_eq(0, s21_is_equal(val1, val2));

#test is_equal_3
s21_decimal val1 = {0};
s21_decimal val2 = {0};
set_bits(&val1, 3, 1);
set_bits(&val2, 3, 1);
ck_assert_int_eq(1, s21_is_equal(val1, val2));

#test is_equal_4
s21_decimal val1 = {0};
s21_decimal val2 = {0};
set_bits(&val1, 3, 1);
set_bits(&val2, 4, 1);
ck_assert_int_eq(0, s21_is_equal(val1, val2));

#test is_equal_5
s21_decimal val1 = {0};
s21_decimal val2 = {0};
set_exp(&val1, 3);
set_exp(&val2, 3);
ck_assert_int_eq(1, s21_is_equal(val1, val2));

#test is_equal_6
s21_decimal val1 = {0};
s21_decimal val2 = {0};
set_bits(&val1, 3, 1);
set_bits(&val2, 4, 1);
set_exp(&val1, 3);
set_exp(&val2, 3);
ck_assert_int_eq(0, s21_is_equal(val1, val2));

#test is_equal_7
s21_decimal val1 = {0};
s21_decimal val2 = {0};
set_exp(&val1, 3);
set_exp(&val2, 2);
ck_assert_int_eq(1, s21_is_equal(val1, val2));

#test is_equal_8
s21_decimal val1 = {0};
s21_decimal val2 = {0};
ck_assert_int_eq(1, s21_is_equal(val1, val2));

#test is_not_equal_0
s21_decimal val1 = {0};
s21_decimal val2 = {0};
set_sign(&val1, 1);
set_sign(&val2, 0);
ck_assert_int_eq(0, s21_is_not_equal(val1, val2));

#test is_not_equal_1
s21_decimal val1 = {0};
s21_decimal val2 = {0};
set_bits(&val2, 3, 1);
ck_assert_int_eq(1, s21_is_not_equal(val1, val2));

#test is_not_equal_2test
s21_decimal val1 = {0};
s21_decimal val2 = {0};
set_sign(&val2, 1);
set_bits(&val1, 33, 1);
set_bits(&val2, 33, 1);
ck_assert_int_eq(1, s21_is_not_equal(val1, val2));

#test is_not_equal_3test
s21_decimal val1 = {0};
s21_decimal val2 = {0};
set_bits(&val1, 3, 1);
set_bits(&val2, 3, 1);
ck_assert_int_eq(0, s21_is_not_equal(val1, val2));

#test is_not_equal_4test
s21_decimal val1 = {0};
s21_decimal val2 = {0};
set_bits(&val1, 3, 1);
set_bits(&val2, 4, 1);
ck_assert_int_eq(1, s21_is_not_equal(val1, val2));

#test is_not_equal_5test
s21_decimal val1 = {0};
s21_decimal val2 = {0};
set_exp(&val1, 3);
set_exp(&val2, 3);
ck_assert_int_eq(0, s21_is_not_equal(val1, val2));

#test is_not_equal_6test
s21_decimal val1 = {0};
s21_decimal val2 = {0};
set_bits(&val1, 3, 1);
set_bits(&val2, 4, 1);
set_exp(&val1, 3);
set_exp(&val2, 3);
ck_assert_int_eq(1, s21_is_not_equal(val1, val2));

#test is_not_equal_7test
s21_decimal val1 = {0};
s21_decimal val2 = {0};
set_exp(&val1, 3);
set_exp(&val2, 2);
ck_assert_int_eq(0, s21_is_not_equal(val1, val2));

#test is_not_equal_8test
s21_decimal val1 = {0};
s21_decimal val2 = {0};
ck_assert_int_eq(0, s21_is_not_equal(val1, val2));

#test sub_0test
s21_decimal val1 = {{2, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal val2 = {{2, 0, 0, 0}};
s21_decimal res;
ck_assert_int_eq(0, s21_sub(val1, val2, &res));

#test sub_1test
s21_decimal val1 = {{2, 0, 0, 0}};
s21_decimal val2 = {{2, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal res;
ck_assert_int_eq(0, s21_sub(val1, val2, &res));

#test sub_2test
s21_decimal val1 = {{2, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal val2 = {{2, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal res;
ck_assert_int_eq(0, s21_sub(val1, val2, &res));

#test sub_3test
s21_decimal val1 = {{2, 0, 0, 0}};
s21_decimal val2 = {{2, 0, 0, 0}};
s21_decimal res;
ck_assert_int_eq(0, s21_sub(val1, val2, &res));

#test sub_4test
s21_decimal val1 = {{8, 0, 0, 0}};
s21_decimal val2 = {{2, 0, 0, 0}};
s21_decimal res;
ck_assert_int_eq(0, s21_sub(val1, val2, &res));

#test sub_5test
s21_decimal val1 = {{2, 0, 0, 0}};
s21_decimal val2 = {{8, 0, 0, 0}};
s21_decimal res;
ck_assert_int_eq(0, s21_sub(val1, val2, &res));

#test sub_6test
s21_decimal val1 = {{8, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal val2 = {{2, 0, 0, 0}};
s21_decimal res;
ck_assert_int_eq(0, s21_sub(val1, val2, &res));

#test sub_7test
s21_decimal val1 = {{2, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal val2 = {{8, 0, 0, 0}};
s21_decimal res;
ck_assert_int_eq(0, s21_sub(val1, val2, &res));

#test sub_8test
s21_decimal val1 = {{2, 0, 0, 0}};
s21_decimal val2 = {{8, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal res;
ck_assert_int_eq(0, s21_sub(val1, val2, &res));

#test sub_9test
s21_decimal val1 = {{8, 0, 0, 0}};
s21_decimal val2 = {{2, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal res;
ck_assert_int_eq(0, s21_sub(val1, val2, &res));

#test sub_10test
s21_decimal val1 = {{8, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal val2 = {{0}};
s21_decimal res;
ck_assert_int_eq(0, s21_sub(val1, val2, &res));

#test sub_11test
s21_decimal val1 = {{UINT_MAX, UINT_MAX, UINT_MAX, ~(UINT_MAX / 2)}};
s21_decimal val2 = {{4, 0, 0, 0}};
s21_decimal res;
ck_assert_int_eq(2, s21_sub(val1, val2, &res));

#test sub_12test
s21_decimal val1 = {{UINT_MAX, UINT_MAX, UINT_MAX, 0}};
s21_decimal val2 = {{4, 0, 0, 0}};
s21_decimal res;
ck_assert_int_eq(0, s21_sub(val1, val2, &res));

#test sub_13test
s21_decimal val1 = {{UINT_MAX, UINT_MAX, UINT_MAX, ~(UINT_MAX / 2)}};
s21_decimal val2 = {{4, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal res;
ck_assert_int_eq(0, s21_sub(val1, val2, &res));

#test sub_14test
s21_decimal val1 = {{4, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal val2 = {{UINT_MAX, UINT_MAX, UINT_MAX, 0}};
s21_decimal res;
ck_assert_int_eq(2, s21_sub(val1, val2, &res));

#test sub_15test
s21_decimal val1 = {{4, 0, 0, 0}};
s21_decimal val2 = {{UINT_MAX, UINT_MAX, UINT_MAX, 0}};
s21_decimal res;
ck_assert_int_eq(0, s21_sub(val1, val2, &res));

#test sub_16test
s21_decimal val1 = {{4, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal val2 = {{UINT_MAX, UINT_MAX, UINT_MAX, ~(UINT_MAX / 2)}};
s21_decimal res;
ck_assert_int_eq(0, s21_sub(val1, val2, &res));

#test sub_17test
s21_decimal val1 = {{UINT_MAX, UINT_MAX, UINT_MAX, 0}};
s21_decimal val2 = {{4, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal res;
ck_assert_int_eq(1, s21_sub(val1, val2, &res));

#test sub_18test
s21_decimal val1 = {{4, 0, 0, 0}};
s21_decimal val2 = {{UINT_MAX, UINT_MAX, UINT_MAX, ~(UINT_MAX / 2)}};
s21_decimal res;
ck_assert_int_eq(1, s21_sub(val1, val2, &res));

#test sub_19test
s21_decimal val1 = {{4, 0, 0, 0}};
s21_decimal val2 = {{4, 0, 0, 0}};
s21_decimal res;
ck_assert_int_eq(0, s21_sub(val1, val2, &res));

#test sub_20test
s21_decimal dec1;
s21_decimal dec2;
int tmp1 = 100;
int tmp2 = 99999;
int res_s21 = 0;
int res = -99899;
s21_decimal res1;
s21_from_int_to_decimal(tmp1, &dec1);
s21_from_int_to_decimal(tmp2, &dec2);
s21_sub(dec1, dec2, &res1);
s21_from_decimal_to_int(res1, &res_s21);
ck_assert_int_eq(res_s21, res);

#test sub_21test
s21_decimal dec1;
s21_decimal dec2;
int tmp1 = -100;
int tmp2 = -99999;
int res_s21 = 0;
s21_decimal res1;
int res = 99899;
s21_from_int_to_decimal(tmp1, &dec1);
s21_from_int_to_decimal(tmp2, &dec2);
s21_sub(dec1, dec2, &res1);
s21_from_decimal_to_int(res1, &res_s21);
ck_assert_int_eq(res_s21, res);

#test add_0
s21_decimal val1 = {{15, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal val2 = {{2, 0, 0, 0}};
s21_decimal res;
ck_assert_int_eq(0, s21_add(val1, val2, &res));

#test add_1
s21_decimal val1 = {{15, 0, 0, 0}};
s21_decimal val2 = {{15, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal res;
ck_assert_int_eq(0, s21_add(val1, val2, &res));

#test add_2
s21_decimal val1 = {{UINT_MAX, UINT_MAX, UINT_MAX, 0}};
s21_decimal val2 = {{1, 0, 0, 0}};
s21_decimal res;
ck_assert_int_eq(1, s21_add(val1, val2, &res));

#test add_3
s21_decimal val1 = {{UINT_MAX, UINT_MAX, UINT_MAX, ~(UINT_MAX / 2)}};
s21_decimal val2 = {{2, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal res;
ck_assert_int_eq(2, s21_add(val1, val2, &res));

#test add_4
s21_decimal val1 = {{8, 0, 0, 0}};
s21_decimal val2 = {{2, 0, 0, 0}};
s21_decimal res;
ck_assert_int_eq(0, s21_add(val1, val2, &res));

#test add_5
s21_decimal val1 = {{2, 0, 0, 0}};
s21_decimal val2 = {{8, 0, 0, 0}};
s21_decimal res;
ck_assert_int_eq(0, s21_add(val1, val2, &res));

#test add_6
s21_decimal val1 = {{8, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal val2 = {{2, 0, 0, 0}};
s21_decimal res;
ck_assert_int_eq(0, s21_add(val1, val2, &res));

#test add_7
s21_decimal val1 = {{2, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal val2 = {{8, 0, 0, 0}};
s21_decimal res;
ck_assert_int_eq(0, s21_add(val1, val2, &res));

#test add_8
s21_decimal val1 = {{0}};
s21_decimal val2 = {{0}};
s21_decimal res;
ck_assert_int_eq(0, s21_add(val1, val2, &res));

#test add_9
s21_decimal val1 = {{4, 0, 0, 0}};
s21_decimal val2 = {{8, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal res;
ck_assert_int_eq(0, s21_add(val1, val2, &res));

#test add_10
s21_decimal val1 = {{8, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal val2 = {{0}};
s21_decimal res;
ck_assert_int_eq(0, s21_add(val1, val2, &res));

#test add_11
s21_decimal val1 = {{UINT_MAX, UINT_MAX, UINT_MAX, ~(UINT_MAX / 2)}};
s21_decimal val2 = {{4, 0, 0, 0}};
s21_decimal res;
ck_assert_int_eq(0, s21_add(val1, val2, &res));

#test add_12
s21_decimal val1 = {{UINT_MAX, UINT_MAX, UINT_MAX, ~(UINT_MAX / 2)}};
s21_decimal val2 = {{4, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal res;
ck_assert_int_eq(2, s21_add(val1, val2, &res));

#test add_13
s21_decimal val1 = {{UINT_MAX, UINT_MAX, UINT_MAX, 0}};
s21_decimal val2 = {{4, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal res;
ck_assert_int_eq(0, s21_add(val1, val2, &res));

#test add_14
s21_decimal val1 = {{4, 0, 0, 0}};
s21_decimal val2 = {{UINT_MAX, UINT_MAX, UINT_MAX, ~(UINT_MAX / 2)}};
s21_decimal res;
ck_assert_int_eq(0, s21_add(val1, val2, &res));

#test add_15
s21_decimal val1 = {{4, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal val2 = {{UINT_MAX, UINT_MAX, UINT_MAX, 0}};
s21_decimal res;
ck_assert_int_eq(0, s21_add(val1, val2, &res));

#test add_16
s21_decimal val1 = {{4, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal val2 = {{UINT_MAX, UINT_MAX, UINT_MAX, ~(UINT_MAX / 2)}};
s21_decimal res;
ck_assert_int_eq(2, s21_add(val1, val2, &res));

#test add_17
s21_decimal val1 = {{UINT_MAX, UINT_MAX, UINT_MAX, 0}};
s21_decimal val2 = {{UINT_MAX, UINT_MAX, UINT_MAX, 0}};
set_exp(&val1, 5);
set_exp(&val2, 3);
s21_decimal res;
ck_assert_int_eq(0, s21_add(val1, val2, &res));

#test add_18
s21_decimal val1 = {{UINT_MAX, UINT_MAX, UINT_MAX, ~(UINT_MAX / 2)}};
s21_decimal val2 = {{UINT_MAX, UINT_MAX, UINT_MAX, ~(UINT_MAX / 2)}};
set_exp(&val1, 5);
set_exp(&val2, 3);
s21_decimal res;
ck_assert_int_eq(0, s21_add(val1, val2, &res));

#test mul_0
s21_decimal val1 = {{2, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal val2 = {{2, 0, 0, 0}};
s21_decimal res = {{0}};
ck_assert_int_eq(0, s21_mul(val1, val2, &res));

#test mul_1
s21_decimal val1 = {{2, 0, 0, 0}};
s21_decimal val2 = {{2, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal res = {{0}};
ck_assert_int_eq(0, s21_mul(val1, val2, &res));

#test mul_2
s21_decimal val1 = {{2, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal val2 = {{2, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal res = {{0}};
ck_assert_int_eq(0, s21_mul(val1, val2, &res));

#test mul_3
s21_decimal val1 = {{2, 0, 0, 0}};
s21_decimal val2 = {{2, 0, 0, 0}};
s21_decimal res = {{0}};
ck_assert_int_eq(0, s21_mul(val1, val2, &res));

#test mul_4
s21_decimal val1 = {{8, 0, 0, 0}};
s21_decimal val2 = {{2, 0, 0, 0}};
s21_decimal res = {{0}};
ck_assert_int_eq(0, s21_mul(val1, val2, &res));

#test mul_5
s21_decimal val1 = {{2, 0, 0, 0}};
s21_decimal val2 = {{8, 0, 0, 0}};
s21_decimal res = {{0}};
ck_assert_int_eq(0, s21_mul(val1, val2, &res));

#test mul_6
s21_decimal val1 = {{8, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal val2 = {{2, 0, 0, 0}};
s21_decimal res = {{0}};
ck_assert_int_eq(0, s21_mul(val1, val2, &res));

#test mul_7
s21_decimal val1 = {{2, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal val2 = {{8, 0, 0, 0}};
s21_decimal res = {{0}};
ck_assert_int_eq(0, s21_mul(val1, val2, &res));

#test mul_8
s21_decimal val1 = {{UINT_MAX, UINT_MAX, UINT_MAX, ~(UINT_MAX / 2)}};
s21_decimal val2 = {{2, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal res = {{0}};
ck_assert_int_eq(1, s21_mul(val1, val2, &res));

#test mul_9
s21_decimal val1 = {{UINT_MAX, UINT_MAX, UINT_MAX, ~(UINT_MAX / 2)}};
s21_decimal val2 = {{2, 0, 0, 0}};
s21_decimal res = {{0}};
ck_assert_int_eq(2, s21_mul(val1, val2, &res));

#test mul_10
s21_decimal val1 = {{UINT_MAX, UINT_MAX, UINT_MAX, 0}};
s21_decimal val2 = {{2, 0, 0, 0}};
s21_decimal res = {{0}};
ck_assert_int_eq(1, s21_mul(val1, val2, &res));

#test mul_11
s21_decimal val1 = {{UINT_MAX, UINT_MAX, UINT_MAX, ~(UINT_MAX / 2)}};
s21_decimal val2 = {{0, 0, 0, 0}};
s21_decimal res = {{0}};
ck_assert_int_eq(0, s21_mul(val1, val2, &res));

#test mul_12
s21_decimal val1 = {{UINT_MAX, UINT_MAX, UINT_MAX, ~(UINT_MAX / 2)}};
s21_decimal val2 = {{0, 0, 0, 0}};
set_exp(&val2, 30);
s21_decimal res = {{0}};
ck_assert_int_eq(2, s21_mul(val1, val2, &res));

#test div_0test
s21_decimal val1 = {{2, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal val2 = {{2, 0, 0, 0}};
s21_decimal res = {{0}};
ck_assert_int_eq(2, s21_div(val1, val2, &res));

#test div_1test
s21_decimal val1 = {{2, 0, 0, 0}};
s21_decimal val2 = {{2, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal res = {{0}};
ck_assert_int_eq(2, s21_div(val1, val2, &res));

#test div_2test
s21_decimal val1 = {{2, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal val2 = {{2, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal res = {{0}};
ck_assert_int_eq(2, s21_div(val1, val2, &res));

#test div_3test
s21_decimal val1 = {{2, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal val2 = {{0, 0, 0, 0}};
s21_decimal res = {{0}};
ck_assert_int_eq(3, s21_div(val1, val2, &res));

#test div_4test
s21_decimal val1 = {{2, 0, 0, 0}};
s21_decimal val2 = {{0, 0, 0, 0}};
s21_decimal res = {{0}};
ck_assert_int_eq(3, s21_div(val1, val2, &res));

#test div_5test
s21_decimal val1 = {{0, 0, 0, 0}};
s21_decimal val2 = {{10, 0, 0, 0}};
s21_decimal res = {{0}};
ck_assert_int_eq(0, s21_div(val1, val2, &res));

#test negate_0test
s21_decimal val = {{2, 0, 0, 0}};
s21_decimal res = {0};
ck_assert_int_eq(0, s21_negate(val, &res));

#test negate_1test
s21_decimal val = {{2, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal res = {0};
ck_assert_int_eq(0, s21_negate(val, &res));

#test negate_2test
s21_decimal val = {{0, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal res = {0};
ck_assert_int_eq(0, s21_negate(val, &res));

#test negate_3test
s21_decimal val = {0};
s21_decimal res = {0};
ck_assert_int_eq(0, s21_negate(val, &res));

#test test_negate
s21_decimal val1, val2, val_ans;
int int_res;

val1.bits[3] = 0x00000000;  // 0
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_negate(val1, &val2);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 1
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val_ans.bits[3] = 0x80000000;  // -1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 9999999999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x80000000;  // -9999999999999999999999999999
val_ans.bits[2] = 0x204FCE5E;
val_ans.bits[1] = 0x3E250261;
val_ans.bits[0] = 0x0FFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 79228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -79228162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00010000;  // 7922816251426433759354395033,5
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80010000;  // -7922816251426433759354395033,5
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x000F0000;  // 79228162514264,337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x800F0000;  // -79228162514264,337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00100000;  // 7922816251426,4337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80100000;  // -7922816251426,4337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00150000;  // 79228162,514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80150000;  // -79228162,514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00160000;  // 7922816,2514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80160000;  // -7922816,2514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001A0000;  // 792,28162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x801A0000;  // -792,28162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001B0000;  // 79,228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x801B0000;  // -79,228162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 7,9228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x801C0000;  // -7,9228162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,1000000000000000000000000000
val1.bits[2] = 0x033B2E3C;
val1.bits[1] = 0x9FD0803C;
val1.bits[0] = 0xE8000000;
val_ans.bits[3] = 0x801C0000;  // -0,1000000000000000000000000000
val_ans.bits[2] = 0x033B2E3C;
val_ans.bits[1] = 0x9FD0803C;
val_ans.bits[0] = 0xE8000000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0100000000000000000000000000
val1.bits[2] = 0x0052B7D2;
val1.bits[1] = 0xDCC80CD2;
val1.bits[0] = 0xE4000000;
val_ans.bits[3] = 0x801C0000;  // -0,0100000000000000000000000000
val_ans.bits[2] = 0x0052B7D2;
val_ans.bits[1] = 0xDCC80CD2;
val_ans.bits[0] = 0xE4000000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0010000000000000000000000000
val1.bits[2] = 0x00084595;
val1.bits[1] = 0x16140148;
val1.bits[0] = 0x4A000000;
val_ans.bits[3] = 0x801C0000;  // -0,0010000000000000000000000000
val_ans.bits[2] = 0x00084595;
val_ans.bits[1] = 0x16140148;
val_ans.bits[0] = 0x4A000000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0001000000000000000000000000
val1.bits[2] = 0x0000D3C2;
val1.bits[1] = 0x1BCECCED;
val1.bits[0] = 0xA1000000;
val_ans.bits[3] = 0x801C0000;  // -0,0001000000000000000000000000
val_ans.bits[2] = 0x0000D3C2;
val_ans.bits[1] = 0x1BCECCED;
val_ans.bits[0] = 0xA1000000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00190000;  // 999,9999999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x80190000;  // -999,9999999999999999999999999
val_ans.bits[2] = 0x204FCE5E;
val_ans.bits[1] = 0x3E250261;
val_ans.bits[0] = 0x0FFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x000B0000;  // 99999999999999999,99999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x800B0000;  // -99999999999999999,99999999999
val_ans.bits[2] = 0x204FCE5E;
val_ans.bits[1] = 0x3E250261;
val_ans.bits[0] = 0x0FFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0000000000000000000000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val_ans.bits[3] = 0x801C0000;  // -0,0000000000000000000000000001
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,4999999999999999999999999999
val1.bits[2] = 0x1027E72F;
val1.bits[1] = 0x1F128130;
val1.bits[0] = 0x87FFFFFF;
val_ans.bits[3] = 0x801C0000;  // -0,4999999999999999999999999999
val_ans.bits[2] = 0x1027E72F;
val_ans.bits[1] = 0x1F128130;
val_ans.bits[0] = 0x87FFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,5000000000000000000000000000
val1.bits[2] = 0x1027E72F;
val1.bits[1] = 0x1F128130;
val1.bits[0] = 0x88000000;
val_ans.bits[3] = 0x801C0000;  // -0,5000000000000000000000000000
val_ans.bits[2] = 0x1027E72F;
val_ans.bits[1] = 0x1F128130;
val_ans.bits[0] = 0x88000000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,5000000000000000000000000001
val1.bits[2] = 0x1027E72F;
val1.bits[1] = 0x1F128130;
val1.bits[0] = 0x88000001;
val_ans.bits[3] = 0x801C0000;  // -0,5000000000000000000000000001
val_ans.bits[2] = 0x1027E72F;
val_ans.bits[1] = 0x1F128130;
val_ans.bits[0] = 0x88000001;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00090000;  // 0,123456789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x80090000;  // -0,123456789
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x075BCD15;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00080000;  // 1,23456789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x80080000;  // -1,23456789
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x075BCD15;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00070000;  // 12,3456789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x80070000;  // -12,3456789
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x075BCD15;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80000000;  // 0
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80000000;  // -1
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val_ans.bits[3] = 0x00000000;  // 1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80000000;  // -9999999999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 9999999999999999999999999999
val_ans.bits[2] = 0x204FCE5E;
val_ans.bits[1] = 0x3E250261;
val_ans.bits[0] = 0x0FFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80000000;  // -79228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 79228162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80010000;  // -7922816251426433759354395033,5
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00010000;  // 7922816251426433759354395033,5
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80020000;  // -792281625142643375935439503,35
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00020000;  // 792281625142643375935439503,35
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80030000;  // -79228162514264337593543950,335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00030000;  // 79228162514264337593543950,335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80040000;  // -7922816251426433759354395,0335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00040000;  // 7922816251426433759354395,0335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80050000;  // -792281625142643375935439,50335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00050000;  // 792281625142643375935439,50335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80060000;  // -79228162514264337593543,950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00060000;  // 79228162514264337593543,950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80070000;  // -7922816251426433759354,3950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00070000;  // 7922816251426433759354,3950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80080000;  // -792281625142643375935,43950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00080000;  // 792281625142643375935,43950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80090000;  // -79228162514264337593,543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00090000;  // 79228162514264337593,543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x800A0000;  // -7922816251426433759,3543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x000A0000;  // 7922816251426433759,3543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x800B0000;  // -792281625142643375,93543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x000B0000;  // 792281625142643375,93543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x800C0000;  // -79228162514264337,593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x000C0000;  // 79228162514264337,593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x800D0000;  // -7922816251426433,7593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x000D0000;  // 7922816251426433,7593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x800E0000;  // -792281625142643,37593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x000E0000;  // 792281625142643,37593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x800F0000;  // -79228162514264,337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x000F0000;  // 79228162514264,337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80100000;  // -7922816251426,4337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00100000;  // 7922816251426,4337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80110000;  // -792281625142,64337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00110000;  // 792281625142,64337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80120000;  // -79228162514,264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00120000;  // 79228162514,264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80130000;  // -7922816251,4264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00130000;  // 7922816251,4264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80140000;  // -792281625,14264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00140000;  // 792281625,14264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80150000;  // -79228162,514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00150000;  // 79228162,514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80160000;  // -7922816,2514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00160000;  // 7922816,2514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80170000;  // -792281,62514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00170000;  // 792281,62514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80180000;  // -79228,162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00180000;  // 79228,162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80190000;  // -7922,8162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00190000;  // 7922,8162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801A0000;  // -792,28162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x001A0000;  // 792,28162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801B0000;  // -79,228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x001B0000;  // 79,228162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -7,9228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x001C0000;  // 7,9228162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,1000000000000000000000000000
val1.bits[2] = 0x033B2E3C;
val1.bits[1] = 0x9FD0803C;
val1.bits[0] = 0xE8000000;
val_ans.bits[3] = 0x001C0000;  // 0,1000000000000000000000000000
val_ans.bits[2] = 0x033B2E3C;
val_ans.bits[1] = 0x9FD0803C;
val_ans.bits[0] = 0xE8000000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0100000000000000000000000000
val1.bits[2] = 0x0052B7D2;
val1.bits[1] = 0xDCC80CD2;
val1.bits[0] = 0xE4000000;
val_ans.bits[3] = 0x001C0000;  // 0,0100000000000000000000000000
val_ans.bits[2] = 0x0052B7D2;
val_ans.bits[1] = 0xDCC80CD2;
val_ans.bits[0] = 0xE4000000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0010000000000000000000000000
val1.bits[2] = 0x00084595;
val1.bits[1] = 0x16140148;
val1.bits[0] = 0x4A000000;
val_ans.bits[3] = 0x001C0000;  // 0,0010000000000000000000000000
val_ans.bits[2] = 0x00084595;
val_ans.bits[1] = 0x16140148;
val_ans.bits[0] = 0x4A000000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0001000000000000000000000000
val1.bits[2] = 0x0000D3C2;
val1.bits[1] = 0x1BCECCED;
val1.bits[0] = 0xA1000000;
val_ans.bits[3] = 0x001C0000;  // 0,0001000000000000000000000000
val_ans.bits[2] = 0x0000D3C2;
val_ans.bits[1] = 0x1BCECCED;
val_ans.bits[0] = 0xA1000000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0000100000000000000000000000
val1.bits[2] = 0x0000152D;
val1.bits[1] = 0x02C7E14A;
val1.bits[0] = 0xF6800000;
val_ans.bits[3] = 0x001C0000;  // 0,0000100000000000000000000000
val_ans.bits[2] = 0x0000152D;
val_ans.bits[1] = 0x02C7E14A;
val_ans.bits[0] = 0xF6800000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0000010000000000000000000000
val1.bits[2] = 0x0000021E;
val1.bits[1] = 0x19E0C9BA;
val1.bits[0] = 0xB2400000;
val_ans.bits[3] = 0x001C0000;  // 0,0000010000000000000000000000
val_ans.bits[2] = 0x0000021E;
val_ans.bits[1] = 0x19E0C9BA;
val_ans.bits[0] = 0xB2400000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0000001000000000000000000000
val1.bits[2] = 0x00000036;
val1.bits[1] = 0x35C9ADC5;
val1.bits[0] = 0xDEA00000;
val_ans.bits[3] = 0x001C0000;  // 0,0000001000000000000000000000
val_ans.bits[2] = 0x00000036;
val_ans.bits[1] = 0x35C9ADC5;
val_ans.bits[0] = 0xDEA00000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0000000100000000000000000000
val1.bits[2] = 0x00000005;
val1.bits[1] = 0x6BC75E2D;
val1.bits[0] = 0x63100000;
val_ans.bits[3] = 0x001C0000;  // 0,0000000100000000000000000000
val_ans.bits[2] = 0x00000005;
val_ans.bits[1] = 0x6BC75E2D;
val_ans.bits[0] = 0x63100000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0000000010000000000000000000
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x8AC72304;
val1.bits[0] = 0x89E80000;
val_ans.bits[3] = 0x001C0000;  // 0,0000000010000000000000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x8AC72304;
val_ans.bits[0] = 0x89E80000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0000000001000000000000000000
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x0DE0B6B3;
val1.bits[0] = 0xA7640000;
val_ans.bits[3] = 0x001C0000;  // 0,0000000001000000000000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x0DE0B6B3;
val_ans.bits[0] = 0xA7640000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0000000000100000000000000000
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x01634578;
val1.bits[0] = 0x5D8A0000;
val_ans.bits[3] = 0x001C0000;  // 0,0000000000100000000000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x01634578;
val_ans.bits[0] = 0x5D8A0000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0000000000010000000000000000
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x002386F2;
val1.bits[0] = 0x6FC10000;
val_ans.bits[3] = 0x001C0000;  // 0,0000000000010000000000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x002386F2;
val_ans.bits[0] = 0x6FC10000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0000000000001000000000000000
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00038D7E;
val1.bits[0] = 0xA4C68000;
val_ans.bits[3] = 0x001C0000;  // 0,0000000000001000000000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00038D7E;
val_ans.bits[0] = 0xA4C68000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0000000000000100000000000000
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00005AF3;
val1.bits[0] = 0x107A4000;
val_ans.bits[3] = 0x001C0000;  // 0,0000000000000100000000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00005AF3;
val_ans.bits[0] = 0x107A4000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0000000000000010000000000000
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000918;
val1.bits[0] = 0x4E72A000;
val_ans.bits[3] = 0x001C0000;  // 0,0000000000000010000000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000918;
val_ans.bits[0] = 0x4E72A000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0000000000000000000000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val_ans.bits[3] = 0x001C0000;  // 0,0000000000000000000000000001
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801B0000;  // -9,999999999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x001B0000;  // 9,999999999999999999999999999
val_ans.bits[2] = 0x204FCE5E;
val_ans.bits[1] = 0x3E250261;
val_ans.bits[0] = 0x0FFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801A0000;  // -99,99999999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x001A0000;  // 99,99999999999999999999999999
val_ans.bits[2] = 0x204FCE5E;
val_ans.bits[1] = 0x3E250261;
val_ans.bits[0] = 0x0FFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80190000;  // -999,9999999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00190000;  // 999,9999999999999999999999999
val_ans.bits[2] = 0x204FCE5E;
val_ans.bits[1] = 0x3E250261;
val_ans.bits[0] = 0x0FFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80180000;  // -9999,999999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00180000;  // 9999,999999999999999999999999
val_ans.bits[2] = 0x204FCE5E;
val_ans.bits[1] = 0x3E250261;
val_ans.bits[0] = 0x0FFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80170000;  // -99999,99999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00170000;  // 99999,99999999999999999999999
val_ans.bits[2] = 0x204FCE5E;
val_ans.bits[1] = 0x3E250261;
val_ans.bits[0] = 0x0FFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80160000;  // -999999,9999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00160000;  // 999999,9999999999999999999999
val_ans.bits[2] = 0x204FCE5E;
val_ans.bits[1] = 0x3E250261;
val_ans.bits[0] = 0x0FFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80150000;  // -9999999,999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00150000;  // 9999999,999999999999999999999
val_ans.bits[2] = 0x204FCE5E;
val_ans.bits[1] = 0x3E250261;
val_ans.bits[0] = 0x0FFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80140000;  // -99999999,99999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00140000;  // 99999999,99999999999999999999
val_ans.bits[2] = 0x204FCE5E;
val_ans.bits[1] = 0x3E250261;
val_ans.bits[0] = 0x0FFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80130000;  // -999999999,9999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00130000;  // 999999999,9999999999999999999
val_ans.bits[2] = 0x204FCE5E;
val_ans.bits[1] = 0x3E250261;
val_ans.bits[0] = 0x0FFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80120000;  // -9999999999,999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00120000;  // 9999999999,999999999999999999
val_ans.bits[2] = 0x204FCE5E;
val_ans.bits[1] = 0x3E250261;
val_ans.bits[0] = 0x0FFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80110000;  // -99999999999,99999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00110000;  // 99999999999,99999999999999999
val_ans.bits[2] = 0x204FCE5E;
val_ans.bits[1] = 0x3E250261;
val_ans.bits[0] = 0x0FFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80100000;  // -999999999999,9999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00100000;  // 999999999999,9999999999999999
val_ans.bits[2] = 0x204FCE5E;
val_ans.bits[1] = 0x3E250261;
val_ans.bits[0] = 0x0FFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x800F0000;  // -9999999999999,999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x000F0000;  // 9999999999999,999999999999999
val_ans.bits[2] = 0x204FCE5E;
val_ans.bits[1] = 0x3E250261;
val_ans.bits[0] = 0x0FFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x800E0000;  // -99999999999999,99999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x000E0000;  // 99999999999999,99999999999999
val_ans.bits[2] = 0x204FCE5E;
val_ans.bits[1] = 0x3E250261;
val_ans.bits[0] = 0x0FFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x800D0000;  // -999999999999999,9999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x000D0000;  // 999999999999999,9999999999999
val_ans.bits[2] = 0x204FCE5E;
val_ans.bits[1] = 0x3E250261;
val_ans.bits[0] = 0x0FFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x800C0000;  // -9999999999999999,999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x000C0000;  // 9999999999999999,999999999999
val_ans.bits[2] = 0x204FCE5E;
val_ans.bits[1] = 0x3E250261;
val_ans.bits[0] = 0x0FFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x800B0000;  // -99999999999999999,99999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x000B0000;  // 99999999999999999,99999999999
val_ans.bits[2] = 0x204FCE5E;
val_ans.bits[1] = 0x3E250261;
val_ans.bits[0] = 0x0FFFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0000000000000000000000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val_ans.bits[3] = 0x001C0000;  // 0,0000000000000000000000000001
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,4999999999999999999999999999
val1.bits[2] = 0x1027E72F;
val1.bits[1] = 0x1F128130;
val1.bits[0] = 0x87FFFFFF;
val_ans.bits[3] = 0x001C0000;  // 0,4999999999999999999999999999
val_ans.bits[2] = 0x1027E72F;
val_ans.bits[1] = 0x1F128130;
val_ans.bits[0] = 0x87FFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,5000000000000000000000000000
val1.bits[2] = 0x1027E72F;
val1.bits[1] = 0x1F128130;
val1.bits[0] = 0x88000000;
val_ans.bits[3] = 0x001C0000;  // 0,5000000000000000000000000000
val_ans.bits[2] = 0x1027E72F;
val_ans.bits[1] = 0x1F128130;
val_ans.bits[0] = 0x88000000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,5000000000000000000000000001
val1.bits[2] = 0x1027E72F;
val1.bits[1] = 0x1F128130;
val1.bits[0] = 0x88000001;
val_ans.bits[3] = 0x001C0000;  // 0,5000000000000000000000000001
val_ans.bits[2] = 0x1027E72F;
val_ans.bits[1] = 0x1F128130;
val_ans.bits[0] = 0x88000001;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -1,4999999999999999999999999999
val1.bits[2] = 0x3077B58D;
val1.bits[1] = 0x5D378391;
val1.bits[0] = 0x97FFFFFF;
val_ans.bits[3] = 0x001C0000;  // 1,4999999999999999999999999999
val_ans.bits[2] = 0x3077B58D;
val_ans.bits[1] = 0x5D378391;
val_ans.bits[0] = 0x97FFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -1,5000000000000000000000000000
val1.bits[2] = 0x3077B58D;
val1.bits[1] = 0x5D378391;
val1.bits[0] = 0x98000000;
val_ans.bits[3] = 0x001C0000;  // 1,5000000000000000000000000000
val_ans.bits[2] = 0x3077B58D;
val_ans.bits[1] = 0x5D378391;
val_ans.bits[0] = 0x98000000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -1,5000000000000000000000000001
val1.bits[2] = 0x3077B58D;
val1.bits[1] = 0x5D378391;
val1.bits[0] = 0x98000001;
val_ans.bits[3] = 0x001C0000;  // 1,5000000000000000000000000001
val_ans.bits[2] = 0x3077B58D;
val_ans.bits[1] = 0x5D378391;
val_ans.bits[0] = 0x98000001;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -2,4999999999999999999999999999
val1.bits[2] = 0x50C783EB;
val1.bits[1] = 0x9B5C85F2;
val1.bits[0] = 0xA7FFFFFF;
val_ans.bits[3] = 0x001C0000;  // 2,4999999999999999999999999999
val_ans.bits[2] = 0x50C783EB;
val_ans.bits[1] = 0x9B5C85F2;
val_ans.bits[0] = 0xA7FFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -2,5000000000000000000000000000
val1.bits[2] = 0x50C783EB;
val1.bits[1] = 0x9B5C85F2;
val1.bits[0] = 0xA8000000;
val_ans.bits[3] = 0x001C0000;  // 2,5000000000000000000000000000
val_ans.bits[2] = 0x50C783EB;
val_ans.bits[1] = 0x9B5C85F2;
val_ans.bits[0] = 0xA8000000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -2,5000000000000000000000000001
val1.bits[2] = 0x50C783EB;
val1.bits[1] = 0x9B5C85F2;
val1.bits[0] = 0xA8000001;
val_ans.bits[3] = 0x001C0000;  // 2,5000000000000000000000000001
val_ans.bits[2] = 0x50C783EB;
val_ans.bits[1] = 0x9B5C85F2;
val_ans.bits[0] = 0xA8000001;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -3,4999999999999999999999999999
val1.bits[2] = 0x71175249;
val1.bits[1] = 0xD9818853;
val1.bits[0] = 0xB7FFFFFF;
val_ans.bits[3] = 0x001C0000;  // 3,4999999999999999999999999999
val_ans.bits[2] = 0x71175249;
val_ans.bits[1] = 0xD9818853;
val_ans.bits[0] = 0xB7FFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -3,5000000000000000000000000000
val1.bits[2] = 0x71175249;
val1.bits[1] = 0xD9818853;
val1.bits[0] = 0xB8000000;
val_ans.bits[3] = 0x001C0000;  // 3,5000000000000000000000000000
val_ans.bits[2] = 0x71175249;
val_ans.bits[1] = 0xD9818853;
val_ans.bits[0] = 0xB8000000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -3,5000000000000000000000000001
val1.bits[2] = 0x71175249;
val1.bits[1] = 0xD9818853;
val1.bits[0] = 0xB8000001;
val_ans.bits[3] = 0x001C0000;  // 3,5000000000000000000000000001
val_ans.bits[2] = 0x71175249;
val_ans.bits[1] = 0xD9818853;
val_ans.bits[0] = 0xB8000001;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -4,4999999999999999999999999999
val1.bits[2] = 0x916720A8;
val1.bits[1] = 0x17A68AB4;
val1.bits[0] = 0xC7FFFFFF;
val_ans.bits[3] = 0x001C0000;  // 4,4999999999999999999999999999
val_ans.bits[2] = 0x916720A8;
val_ans.bits[1] = 0x17A68AB4;
val_ans.bits[0] = 0xC7FFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -4,5000000000000000000000000000
val1.bits[2] = 0x916720A8;
val1.bits[1] = 0x17A68AB4;
val1.bits[0] = 0xC8000000;
val_ans.bits[3] = 0x001C0000;  // 4,5000000000000000000000000000
val_ans.bits[2] = 0x916720A8;
val_ans.bits[1] = 0x17A68AB4;
val_ans.bits[0] = 0xC8000000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -4,5000000000000000000000000001
val1.bits[2] = 0x916720A8;
val1.bits[1] = 0x17A68AB4;
val1.bits[0] = 0xC8000001;
val_ans.bits[3] = 0x001C0000;  // 4,5000000000000000000000000001
val_ans.bits[2] = 0x916720A8;
val_ans.bits[1] = 0x17A68AB4;
val_ans.bits[0] = 0xC8000001;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -5,4999999999999999999999999999
val1.bits[2] = 0xB1B6EF06;
val1.bits[1] = 0x55CB8D15;
val1.bits[0] = 0xD7FFFFFF;
val_ans.bits[3] = 0x001C0000;  // 5,4999999999999999999999999999
val_ans.bits[2] = 0xB1B6EF06;
val_ans.bits[1] = 0x55CB8D15;
val_ans.bits[0] = 0xD7FFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -5,5000000000000000000000000000
val1.bits[2] = 0xB1B6EF06;
val1.bits[1] = 0x55CB8D15;
val1.bits[0] = 0xD8000000;
val_ans.bits[3] = 0x001C0000;  // 5,5000000000000000000000000000
val_ans.bits[2] = 0xB1B6EF06;
val_ans.bits[1] = 0x55CB8D15;
val_ans.bits[0] = 0xD8000000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -5,5000000000000000000000000001
val1.bits[2] = 0xB1B6EF06;
val1.bits[1] = 0x55CB8D15;
val1.bits[0] = 0xD8000001;
val_ans.bits[3] = 0x001C0000;  // 5,5000000000000000000000000001
val_ans.bits[2] = 0xB1B6EF06;
val_ans.bits[1] = 0x55CB8D15;
val_ans.bits[0] = 0xD8000001;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -6,4999999999999999999999999999
val1.bits[2] = 0xD206BD64;
val1.bits[1] = 0x93F08F76;
val1.bits[0] = 0xE7FFFFFF;
val_ans.bits[3] = 0x001C0000;  // 6,4999999999999999999999999999
val_ans.bits[2] = 0xD206BD64;
val_ans.bits[1] = 0x93F08F76;
val_ans.bits[0] = 0xE7FFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -6,5000000000000000000000000000
val1.bits[2] = 0xD206BD64;
val1.bits[1] = 0x93F08F76;
val1.bits[0] = 0xE8000000;
val_ans.bits[3] = 0x001C0000;  // 6,5000000000000000000000000000
val_ans.bits[2] = 0xD206BD64;
val_ans.bits[1] = 0x93F08F76;
val_ans.bits[0] = 0xE8000000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -6,5000000000000000000000000001
val1.bits[2] = 0xD206BD64;
val1.bits[1] = 0x93F08F76;
val1.bits[0] = 0xE8000001;
val_ans.bits[3] = 0x001C0000;  // 6,5000000000000000000000000001
val_ans.bits[2] = 0xD206BD64;
val_ans.bits[1] = 0x93F08F76;
val_ans.bits[0] = 0xE8000001;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -7,4999999999999999999999999999
val1.bits[2] = 0xF2568BC2;
val1.bits[1] = 0xD21591D7;
val1.bits[0] = 0xF7FFFFFF;
val_ans.bits[3] = 0x001C0000;  // 7,4999999999999999999999999999
val_ans.bits[2] = 0xF2568BC2;
val_ans.bits[1] = 0xD21591D7;
val_ans.bits[0] = 0xF7FFFFFF;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -7,5000000000000000000000000000
val1.bits[2] = 0xF2568BC2;
val1.bits[1] = 0xD21591D7;
val1.bits[0] = 0xF8000000;
val_ans.bits[3] = 0x001C0000;  // 7,5000000000000000000000000000
val_ans.bits[2] = 0xF2568BC2;
val_ans.bits[1] = 0xD21591D7;
val_ans.bits[0] = 0xF8000000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -7,5000000000000000000000000001
val1.bits[2] = 0xF2568BC2;
val1.bits[1] = 0xD21591D7;
val1.bits[0] = 0xF8000001;
val_ans.bits[3] = 0x001C0000;  // 7,5000000000000000000000000001
val_ans.bits[2] = 0xF2568BC2;
val_ans.bits[1] = 0xD21591D7;
val_ans.bits[0] = 0xF8000001;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801B0000;  // -8,500000000000000000000000000
val1.bits[2] = 0x1B770903;
val1.bits[1] = 0x4E6C4205;
val1.bits[0] = 0xB4000000;
val_ans.bits[3] = 0x001B0000;  // 8,500000000000000000000000000
val_ans.bits[2] = 0x1B770903;
val_ans.bits[1] = 0x4E6C4205;
val_ans.bits[0] = 0xB4000000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801B0000;  // -8,500000000000000000000000000
val1.bits[2] = 0x1B770903;
val1.bits[1] = 0x4E6C4205;
val1.bits[0] = 0xB4000000;
val_ans.bits[3] = 0x001B0000;  // 8,500000000000000000000000000
val_ans.bits[2] = 0x1B770903;
val_ans.bits[1] = 0x4E6C4205;
val_ans.bits[0] = 0xB4000000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801B0000;  // -8,500000000000000000000000000
val1.bits[2] = 0x1B770903;
val1.bits[1] = 0x4E6C4205;
val1.bits[0] = 0xB4000000;
val_ans.bits[3] = 0x001B0000;  // 8,500000000000000000000000000
val_ans.bits[2] = 0x1B770903;
val_ans.bits[1] = 0x4E6C4205;
val_ans.bits[0] = 0xB4000000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801B0000;  // -9,500000000000000000000000000
val1.bits[2] = 0x1EB2373F;
val1.bits[1] = 0xEE3CC242;
val1.bits[0] = 0x9C000000;
val_ans.bits[3] = 0x001B0000;  // 9,500000000000000000000000000
val_ans.bits[2] = 0x1EB2373F;
val_ans.bits[1] = 0xEE3CC242;
val_ans.bits[0] = 0x9C000000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801B0000;  // -9,500000000000000000000000000
val1.bits[2] = 0x1EB2373F;
val1.bits[1] = 0xEE3CC242;
val1.bits[0] = 0x9C000000;
val_ans.bits[3] = 0x001B0000;  // 9,500000000000000000000000000
val_ans.bits[2] = 0x1EB2373F;
val_ans.bits[1] = 0xEE3CC242;
val_ans.bits[0] = 0x9C000000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801B0000;  // -9,500000000000000000000000000
val1.bits[2] = 0x1EB2373F;
val1.bits[1] = 0xEE3CC242;
val1.bits[0] = 0x9C000000;
val_ans.bits[3] = 0x001B0000;  // 9,500000000000000000000000000
val_ans.bits[2] = 0x1EB2373F;
val_ans.bits[1] = 0xEE3CC242;
val_ans.bits[0] = 0x9C000000;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80090000;  // -0,123456789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00090000;  // 0,123456789
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x075BCD15;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80080000;  // -1,23456789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00080000;  // 1,23456789
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x075BCD15;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80070000;  // -12,3456789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00070000;  // 12,3456789
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x075BCD15;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80060000;  // -123,456789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00060000;  // 123,456789
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x075BCD15;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80050000;  // -1234,56789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00050000;  // 1234,56789
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x075BCD15;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80040000;  // -12345,6789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00040000;  // 12345,6789
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x075BCD15;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80030000;  // -123456,789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00030000;  // 123456,789
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x075BCD15;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80020000;  // -1234567,89
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00020000;  // 1234567,89
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x075BCD15;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80010000;  // -12345678,9
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00010000;  // 12345678,9
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x075BCD15;
int_res = s21_negate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);
ck_assert_int_eq(int_res, 0);

#test negate_3190
s21_decimal s21_res;
s21_decimal var_a = {{1, 0, 0, -2147483648}};
// var: -1
int return_res = s21_negate(var_a, &s21_res);
// var: 1
ck_assert_int_eq(s21_res.bits[0], 1);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test negate_3192
s21_decimal s21_res;
s21_decimal var_a = {{13, 0, 0, -2147418112}};
// var: -1,3
int return_res = s21_negate(var_a, &s21_res);
// var: 1,3
ck_assert_int_eq(s21_res.bits[0], 13);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 65536);
ck_assert_int_eq(return_res, 0);

#test negate_3193
s21_decimal s21_res;
s21_decimal var_a = {{15, 0, 0, -2147418112}};
// var: -1,5
int return_res = s21_negate(var_a, &s21_res);
// var: 1,5
ck_assert_int_eq(s21_res.bits[0], 15);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 65536);
ck_assert_int_eq(return_res, 0);

#test negate_3194
s21_decimal s21_res;
s21_decimal var_a = {{16, 0, 0, -2147418112}};
// var: -1,6
int return_res = s21_negate(var_a, &s21_res);
// var: 1,6
ck_assert_int_eq(s21_res.bits[0], 16);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 65536);
ck_assert_int_eq(return_res, 0);

#test negate_3195
s21_decimal s21_res;
s21_decimal var_a = {{25, 0, 0, -2147418112}};
// var: -2,5
int return_res = s21_negate(var_a, &s21_res);
// var: 2,5
ck_assert_int_eq(s21_res.bits[0], 25);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 65536);
ck_assert_int_eq(return_res, 0);

#test negate_3196
s21_decimal s21_res;
s21_decimal var_a = {{2501, 0, 0, -2147287040}};
// var: -2,501
int return_res = s21_negate(var_a, &s21_res);
// var: 2,501
ck_assert_int_eq(s21_res.bits[0], 2501);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 196608);
ck_assert_int_eq(return_res, 0);

#test negate_3197
s21_decimal s21_res;
s21_decimal var_a = {{1501, 0, 0, -2147287040}};
// var: -1,501
int return_res = s21_negate(var_a, &s21_res);
// var: 1,501
ck_assert_int_eq(s21_res.bits[0], 1501);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 196608);
ck_assert_int_eq(return_res, 0);

#test round_0test
s21_decimal val = {{7, 7, 7, 0}};
s21_decimal res = {0};
ck_assert_int_eq(0, s21_round(val, &res));

#test round_1test
s21_decimal val = {{3, 3, 3, ~(UINT_MAX / 2)}};
s21_decimal res = {0};
ck_assert_int_eq(0, s21_round(val, &res));

#test round_2test
s21_decimal val = {{3, 3, 3, 0}};
s21_decimal res = {0};
set_exp(&val, 5);
ck_assert_int_eq(0, s21_round(val, &res));

#test round_3test
s21_decimal val = {{7, 7, 7, ~(UINT_MAX / 2)}};
s21_decimal res = {0};
set_exp(&val, 5);
ck_assert_int_eq(0, s21_round(val, &res));

#test round_4test
s21_decimal val = {{25, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal res = {0};
set_exp(&val, 1);
ck_assert_int_eq(0, s21_round(val, &res));

#test round_5test
s21_decimal val = {{26, 0, 0, 0}};
s21_decimal res = {0};
set_exp(&val, 1);
ck_assert_int_eq(0, s21_round(val, &res));

#test round_6test
s21_decimal val = {{115, 0, 0, 0}};
s21_decimal res = {0};
set_exp(&val, 1);
ck_assert_int_eq(0, s21_round(val, &res));

#test round_7test
s21_decimal val = {{118, 0, 0, 0}};
s21_decimal res = {0};
set_exp(&val, 1);
ck_assert_int_eq(0, s21_round(val, &res));

#test round_8test
s21_decimal val = {{125, 0, 0, 0}};
s21_decimal res = {0};
set_exp(&val, 1);
ck_assert_int_eq(0, s21_round(val, &res));

#test round_9test
s21_decimal val = {{128, 0, 0, 0}};
s21_decimal res = {0};
set_exp(&val, 1);
ck_assert_int_eq(0, s21_round(val, &res));

#test test_round
s21_decimal val1, val2, val_ans;
int int_res;

val1.bits[3] = 0x00000000;  // 0
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 1
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val_ans.bits[3] = 0x00000000;  // 1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 9999999999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 9999999999999999999999999999
val_ans.bits[2] = 0x204FCE5E;
val_ans.bits[1] = 0x3E250261;
val_ans.bits[0] = 0x0FFFFFFF;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 79228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 79228162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00130000;  // 7922816251,4264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 7922816251
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000001;
val_ans.bits[0] = 0xD83C94FB;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00140000;  // 792281625,14264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 792281625
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x2F394219;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00150000;  // 79228162,514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 79228163
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x04B8ED03;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00160000;  // 7922816,2514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 7922816
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0078E480;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00170000;  // 792281,62514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 792282
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x000C16DA;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00180000;  // 79228,162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 79228
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0001357C;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00190000;  // 7922,8162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 7923
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00001EF3;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001A0000;  // 792,28162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 792
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000318;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001B0000;  // 79,228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 79
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000004F;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 7,9228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 8
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000008;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,1000000000000000000000000000
val1.bits[2] = 0x033B2E3C;
val1.bits[1] = 0x9FD0803C;
val1.bits[0] = 0xE8000000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0100000000000000000000000000
val1.bits[2] = 0x0052B7D2;
val1.bits[1] = 0xDCC80CD2;
val1.bits[0] = 0xE4000000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0010000000000000000000000000
val1.bits[2] = 0x00084595;
val1.bits[1] = 0x16140148;
val1.bits[0] = 0x4A000000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0001000000000000000000000000
val1.bits[2] = 0x0000D3C2;
val1.bits[1] = 0x1BCECCED;
val1.bits[0] = 0xA1000000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0000100000000000000000000000
val1.bits[2] = 0x0000152D;
val1.bits[1] = 0x02C7E14A;
val1.bits[0] = 0xF6800000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0000010000000000000000000000
val1.bits[2] = 0x0000021E;
val1.bits[1] = 0x19E0C9BA;
val1.bits[0] = 0xB2400000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0000001000000000000000000000
val1.bits[2] = 0x00000036;
val1.bits[1] = 0x35C9ADC5;
val1.bits[0] = 0xDEA00000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0000000100000000000000000000
val1.bits[2] = 0x00000005;
val1.bits[1] = 0x6BC75E2D;
val1.bits[0] = 0x63100000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0000000010000000000000000000
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x8AC72304;
val1.bits[0] = 0x89E80000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0000000001000000000000000000
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x0DE0B6B3;
val1.bits[0] = 0xA7640000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0000000000100000000000000000
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x01634578;
val1.bits[0] = 0x5D8A0000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0000000000010000000000000000
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x002386F2;
val1.bits[0] = 0x6FC10000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0000000000001000000000000000
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00038D7E;
val1.bits[0] = 0xA4C68000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0000000000000100000000000000
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00005AF3;
val1.bits[0] = 0x107A4000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0000000000000010000000000000
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000918;
val1.bits[0] = 0x4E72A000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0000000000000000000000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001B0000;  // 9,999999999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 10
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000000A;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001A0000;  // 99,99999999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 100
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000064;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00190000;  // 999,9999999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 1000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x000003E8;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00180000;  // 9999,999999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 10000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00002710;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00170000;  // 99999,99999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 100000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x000186A0;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00160000;  // 999999,9999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 1000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x000F4240;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00150000;  // 9999999,999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 10000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00989680;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00140000;  // 99999999,99999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 100000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x05F5E100;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00130000;  // 999999999,9999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 1000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x3B9ACA00;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00120000;  // 9999999999,999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 10000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000002;
val_ans.bits[0] = 0x540BE400;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00110000;  // 99999999999,99999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 100000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000017;
val_ans.bits[0] = 0x4876E800;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00100000;  // 999999999999,9999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 1000000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x000000E8;
val_ans.bits[0] = 0xD4A51000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x000F0000;  // 9999999999999,999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 10000000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000918;
val_ans.bits[0] = 0x4E72A000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x000E0000;  // 99999999999999,99999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 100000000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00005AF3;
val_ans.bits[0] = 0x107A4000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x000D0000;  // 999999999999999,9999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 1000000000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00038D7E;
val_ans.bits[0] = 0xA4C68000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x000C0000;  // 9999999999999999,999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 10000000000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x002386F2;
val_ans.bits[0] = 0x6FC10000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x000B0000;  // 99999999999999999,99999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 100000000000000000
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x01634578;
val_ans.bits[0] = 0x5D8A0000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0000000000000000000000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,4999999999999999999999999999
val1.bits[2] = 0x1027E72F;
val1.bits[1] = 0x1F128130;
val1.bits[0] = 0x87FFFFFF;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 1,5000000000000000000000000000
val1.bits[2] = 0x3077B58D;
val1.bits[1] = 0x5D378391;
val1.bits[0] = 0x98000000;
val_ans.bits[3] = 0x00000000;  // 2
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000002;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 1,5000000000000000000000000001
val1.bits[2] = 0x3077B58D;
val1.bits[1] = 0x5D378391;
val1.bits[0] = 0x98000001;
val_ans.bits[3] = 0x00000000;  // 2
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000002;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 2,4999999999999999999999999999
val1.bits[2] = 0x50C783EB;
val1.bits[1] = 0x9B5C85F2;
val1.bits[0] = 0xA7FFFFFF;
val_ans.bits[3] = 0x00000000;  // 2
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000002;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00090000;  // 0,123456789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00080000;  // 1,23456789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00000000;  // 1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00070000;  // 12,3456789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00000000;  // 12
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000000C;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00060000;  // 123,456789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00000000;  // 123
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000007B;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00050000;  // 1234,56789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00000000;  // 1235
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x000004D3;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00040000;  // 12345,6789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00000000;  // 12346
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000303A;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00030000;  // 123456,789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00000000;  // 123457
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0001E241;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00020000;  // 1234567,89
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00000000;  // 1234568
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0012D688;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00010000;  // 12345678,9
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00000000;  // 12345679
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00BC614F;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 123456789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00000000;  // 123456789
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x075BCD15;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 123456789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00000000;  // 123456789
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x075BCD15;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80000000;  // -1
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val_ans.bits[3] = 0x80000000;  // -1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80000000;  // -9999999999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x80000000;  // -9999999999999999999999999999
val_ans.bits[2] = 0x204FCE5E;
val_ans.bits[1] = 0x3E250261;
val_ans.bits[0] = 0x0FFFFFFF;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80000000;  // -79228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -79228162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80140000;  // -792281625,14264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -792281625
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x2F394219;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80150000;  // -79228162,514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -79228163
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x04B8ED03;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80160000;  // -7922816,2514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -7922816
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0078E480;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80170000;  // -792281,62514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -792282
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x000C16DA;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80180000;  // -79228,162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -79228
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0001357C;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80190000;  // -7922,8162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -7923
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00001EF3;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801A0000;  // -792,28162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -792
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000318;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801B0000;  // -79,228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -79
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000004F;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -7,9228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -8
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000008;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -1,4999999999999999999999999999
val1.bits[2] = 0x3077B58D;
val1.bits[1] = 0x5D378391;
val1.bits[0] = 0x97FFFFFF;
val_ans.bits[3] = 0x80000000;  // -1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -1,5000000000000000000000000000
val1.bits[2] = 0x3077B58D;
val1.bits[1] = 0x5D378391;
val1.bits[0] = 0x98000000;
val_ans.bits[3] = 0x80000000;  // -2
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000002;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -1,5000000000000000000000000001
val1.bits[2] = 0x3077B58D;
val1.bits[1] = 0x5D378391;
val1.bits[0] = 0x98000001;
val_ans.bits[3] = 0x80000000;  // -2
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000002;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -2,4999999999999999999999999999
val1.bits[2] = 0x50C783EB;
val1.bits[1] = 0x9B5C85F2;
val1.bits[0] = 0xA7FFFFFF;
val_ans.bits[3] = 0x80000000;  // -2
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000002;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80080000;  // -1,23456789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x80000000;  // -1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80070000;  // -12,3456789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x80000000;  // -12
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000000C;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80060000;  // -123,456789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x80000000;  // -123
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000007B;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80050000;  // -1234,56789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x80000000;  // -1235
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x000004D3;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80040000;  // -12345,6789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x80000000;  // -12346
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000303A;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80030000;  // -123456,789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x80000000;  // -123457
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0001E241;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80020000;  // -1234567,89
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x80000000;  // -1234568
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0012D688;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80010000;  // -12345678,9
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x80000000;  // -12345679
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00BC614F;
int_res = s21_round(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

#test truncate_01test
s21_decimal a = {{1, 2, 3, 0}};
s21_decimal b;

ck_assert_int_eq(s21_round(a, &b), 0);

#test truncate_02test
s21_decimal a = {{3, 2, 1, 0}};
s21_decimal b;
set_sign(&a, 1);

ck_assert_int_eq(s21_round(a, &b), 0);

#test truncate_03test
s21_decimal a = {{0}};
s21_decimal b = {{0}};
s21_decimal zero = {{0}};
ck_assert_int_eq(s21_round(a, &b), 0);
ck_assert_int_eq(s21_is_equal(b, zero), 1);

#test truncate_04test
s21_decimal a = {{3, 2, 1, 0}};
s21_decimal b;
set_sign(&a, 0);
set_exp(&a, 3);
ck_assert_int_eq(s21_round(a, &b), 0);

#test truncate_05test
s21_decimal a = {{3, 2, 1, 0}};
s21_decimal b;
set_sign(&a, 1);
set_exp(&a, 2);

ck_assert_int_eq(s21_round(a, &b), 0);

#test truncate_06test
s21_decimal a = {{0x000000D3, 0x00000000, 0x00000000, 0x80020000}};
s21_decimal b;
s21_decimal res = {{2, 0, 0, 0x80000000}};
ck_assert_int_eq(s21_truncate(a, &b), 0);
for (int i = 0; i < 4; i++) {
  ck_assert_int_eq(b.bits[i], res.bits[i]);
}

#test truncate_0test
s21_decimal val = {{7, 7, 7, 0}};
s21_decimal res = {0};

ck_assert_int_eq(0, s21_truncate(val, &res));

#test truncate_1test
s21_decimal val = {{2, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal res = {0};
ck_assert_int_eq(0, s21_truncate(val, &res));

#test truncate_2test
s21_decimal val = {{2, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal res = {0};
ck_assert_int_eq(0, s21_truncate(val, &res));

#test truncate_3test
s21_decimal val = {{2, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal res = {0};
set_exp(&val, 5);
ck_assert_int_eq(0, s21_truncate(val, &res));

#test test_truncate

s21_decimal val1, val2, val_ans;
int int_res;

val1.bits[3] = 0x00000000;  // 0
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_truncate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 1
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val_ans.bits[3] = 0x00000000;  // 1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_truncate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 9999999999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 9999999999999999999999999999
val_ans.bits[2] = 0x204FCE5E;
val_ans.bits[1] = 0x3E250261;
val_ans.bits[0] = 0x0FFFFFFF;
int_res = s21_truncate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 79228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 79228162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_truncate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80000000;  // -1
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val_ans.bits[3] = 0x80000000;  // -1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_truncate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80000000;  // -9999999999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x80000000;  // -9999999999999999999999999999
val_ans.bits[2] = 0x204FCE5E;
val_ans.bits[1] = 0x3E250261;
val_ans.bits[0] = 0x0FFFFFFF;
int_res = s21_truncate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80010000;  // -7922816251426433759354395033,5
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -7922816251426433759354395033
val_ans.bits[2] = 0x19999999;
val_ans.bits[1] = 0x99999999;
val_ans.bits[0] = 0x99999999;
int_res = s21_truncate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80020000;  // -792281625142643375935439503,35
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -792281625142643375935439503
val_ans.bits[2] = 0x028F5C28;
val_ans.bits[1] = 0xF5C28F5C;
val_ans.bits[0] = 0x28F5C28F;
int_res = s21_truncate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000007;
int_res = s21_truncate(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

#test floor_2947
s21_decimal s21_res;
s21_decimal var_a = {{1233, 0, 0, 65536}};
// var: 123,3
int return_res = s21_floor(var_a, &s21_res);
// var: 123
ck_assert_int_eq(s21_res.bits[0], 123);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test floor_2954
s21_decimal s21_res;
s21_decimal var_a = {{13, 0, 0, 65536}};
// var: 1,3
int return_res = s21_floor(var_a, &s21_res);
// var: 1
ck_assert_int_eq(s21_res.bits[0], 1);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test floor_2955
s21_decimal s21_res;
s21_decimal var_a = {{15, 0, 0, 65536}};
// var: 1,5
int return_res = s21_floor(var_a, &s21_res);
// var: 1
ck_assert_int_eq(s21_res.bits[0], 1);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test floor_2956
s21_decimal s21_res;
s21_decimal var_a = {{16, 0, 0, 65536}};
// var: 1,6
int return_res = s21_floor(var_a, &s21_res);
// var: 1
ck_assert_int_eq(s21_res.bits[0], 1);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test floor_2957
s21_decimal s21_res;
s21_decimal var_a = {{25, 0, 0, 65536}};
// var: 2,5
int return_res = s21_floor(var_a, &s21_res);
// var: 2
ck_assert_int_eq(s21_res.bits[0], 2);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test floor_2958
s21_decimal s21_res;
s21_decimal var_a = {{2501, 0, 0, 196608}};
// var: 2,501
int return_res = s21_floor(var_a, &s21_res);
// var: 2
ck_assert_int_eq(s21_res.bits[0], 2);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test floor_2959
s21_decimal s21_res;
s21_decimal var_a = {{1501, 0, 0, 196608}};
// var: 1,501
int return_res = s21_floor(var_a, &s21_res);
// var: 1
ck_assert_int_eq(s21_res.bits[0], 1);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test floor_2960
s21_decimal s21_res;
s21_decimal var_a = {{-246546429, -1431150380, 0, 1114112}};
// var: 123,00000000000000003
int return_res = s21_floor(var_a, &s21_res);
// var: 123
ck_assert_int_eq(s21_res.bits[0], 123);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test floor_3007
s21_decimal s21_res;
s21_decimal var_a = {{-1433630542, -1629269048, 1171909841, 1048576}};
// var: 2161792092583,7739713513687218
int return_res = s21_floor(var_a, &s21_res);
// var: 2161792092583
ck_assert_int_eq(s21_res.bits[0], 1423542695);
ck_assert_int_eq(s21_res.bits[1], 503);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test floor_3035
s21_decimal s21_res;
s21_decimal var_a = {{-769625580, -654415354, -213505526, 1769472}};
// var: 75,289680733455648538350350868
int return_res = s21_floor(var_a, &s21_res);
// var: 75
ck_assert_int_eq(s21_res.bits[0], 75);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test test_floor
s21_decimal val1, val2, val_ans;
int int_res;

val1.bits[3] = 0x00000000;  // 0
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 1
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val_ans.bits[3] = 0x00000000;  // 1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 9999999999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 9999999999999999999999999999
val_ans.bits[2] = 0x204FCE5E;
val_ans.bits[1] = 0x3E250261;
val_ans.bits[0] = 0x0FFFFFFF;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00000000;  // 79228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 79228162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00010000;  // 7922816251426433759354395033,5
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 7922816251426433759354395033
val_ans.bits[2] = 0x19999999;
val_ans.bits[1] = 0x99999999;
val_ans.bits[0] = 0x99999999;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00020000;  // 792281625142643375935439503,35
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 792281625142643375935439503
val_ans.bits[2] = 0x028F5C28;
val_ans.bits[1] = 0xF5C28F5C;
val_ans.bits[0] = 0x28F5C28F;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00030000;  // 79228162514264337593543950,335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 79228162514264337593543950
val_ans.bits[2] = 0x00418937;
val_ans.bits[1] = 0x4BC6A7EF;
val_ans.bits[0] = 0x9DB22D0E;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00040000;  // 7922816251426433759354395,0335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 7922816251426433759354395
val_ans.bits[2] = 0x00068DB8;
val_ans.bits[1] = 0xBAC710CB;
val_ans.bits[0] = 0x295E9E1B;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00050000;  // 792281625142643375935439,50335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 792281625142643375935439
val_ans.bits[2] = 0x0000A7C5;
val_ans.bits[1] = 0xAC471B47;
val_ans.bits[0] = 0x84230FCF;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00060000;  // 79228162514264337593543,950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 79228162514264337593543
val_ans.bits[2] = 0x000010C6;
val_ans.bits[1] = 0xF7A0B5ED;
val_ans.bits[0] = 0x8D36B4C7;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00070000;  // 7922816251426433759354,3950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 7922816251426433759354
val_ans.bits[2] = 0x000001AD;
val_ans.bits[1] = 0x7F29ABCA;
val_ans.bits[0] = 0xF485787A;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00080000;  // 792281625142643375935,43950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 792281625142643375935
val_ans.bits[2] = 0x0000002A;
val_ans.bits[1] = 0xF31DC461;
val_ans.bits[0] = 0x1873BF3F;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00090000;  // 79228162514264337593,543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 79228162514264337593
val_ans.bits[2] = 0x00000004;
val_ans.bits[1] = 0x4B82FA09;
val_ans.bits[0] = 0xB5A52CB9;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x000A0000;  // 7922816251426433759,3543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 7922816251426433759
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x6DF37F67;
val_ans.bits[0] = 0x5EF6EADF;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x000B0000;  // 792281625142643375,93543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 792281625142643375
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x0AFEBFF0;
val_ans.bits[0] = 0xBCB24AAF;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x000C0000;  // 79228162514264337,593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 79228162514264337
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x01197998;
val_ans.bits[0] = 0x12DEA111;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x000D0000;  // 7922816251426433,7593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 7922816251426433
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x001C25C2;
val_ans.bits[0] = 0x68497681;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x000E0000;  // 792281625142643,37593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 792281625142643
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x0002D093;
val_ans.bits[0] = 0x70D42573;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x000F0000;  // 79228162514264,337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 79228162514264
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x0000480E;
val_ans.bits[0] = 0xBE7B9D58;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00100000;  // 7922816251426,4337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 7922816251426
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000734;
val_ans.bits[0] = 0xACA5F622;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00110000;  // 792281625142,64337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 792281625142
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x000000B8;
val_ans.bits[0] = 0x77AA3236;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00120000;  // 79228162514,264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 79228162514
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000012;
val_ans.bits[0] = 0x725DD1D2;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00130000;  // 7922816251,4264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 7922816251
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000001;
val_ans.bits[0] = 0xD83C94FB;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00140000;  // 792281625,14264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 792281625
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x2F394219;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00150000;  // 79228162,514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 79228162
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x04B8ED02;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00160000;  // 7922816,2514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 7922816
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0078E480;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00170000;  // 792281,62514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 792281
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x000C16D9;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00180000;  // 79228,162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 79228
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0001357C;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00190000;  // 7922,8162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 7922
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00001EF2;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001A0000;  // 792,28162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 792
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000318;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001B0000;  // 79,228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 79
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000004F;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 7,9228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x00000000;  // 7
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000007;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,1000000000000000000000000000
val1.bits[2] = 0x033B2E3C;
val1.bits[1] = 0x9FD0803C;
val1.bits[0] = 0xE8000000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0100000000000000000000000000
val1.bits[2] = 0x0052B7D2;
val1.bits[1] = 0xDCC80CD2;
val1.bits[0] = 0xE4000000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001B0000;  // 9,999999999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 9
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000009;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x000B0000;  // 99999999999999999,99999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x00000000;  // 99999999999999999
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x01634578;
val_ans.bits[0] = 0x5D89FFFF;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,0000000000000000000000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,4999999999999999999999999999
val1.bits[2] = 0x1027E72F;
val1.bits[1] = 0x1F128130;
val1.bits[0] = 0x87FFFFFF;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,5000000000000000000000000000
val1.bits[2] = 0x1027E72F;
val1.bits[1] = 0x1F128130;
val1.bits[0] = 0x88000000;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 0,5000000000000000000000000001
val1.bits[2] = 0x1027E72F;
val1.bits[1] = 0x1F128130;
val1.bits[0] = 0x88000001;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 1,4999999999999999999999999999
val1.bits[2] = 0x3077B58D;
val1.bits[1] = 0x5D378391;
val1.bits[0] = 0x97FFFFFF;
val_ans.bits[3] = 0x00000000;  // 1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 1,5000000000000000000000000000
val1.bits[2] = 0x3077B58D;
val1.bits[1] = 0x5D378391;
val1.bits[0] = 0x98000000;
val_ans.bits[3] = 0x00000000;  // 1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x001C0000;  // 1,5000000000000000000000000001
val1.bits[2] = 0x3077B58D;
val1.bits[1] = 0x5D378391;
val1.bits[0] = 0x98000001;
val_ans.bits[3] = 0x00000000;  // 1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00090000;  // 0,123456789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00000000;  // 0
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000000;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x00080000;  // 1,23456789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x00000000;  // 1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80000000;  // -1
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val_ans.bits[3] = 0x80000000;  // -1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80000000;  // -9999999999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x80000000;  // -9999999999999999999999999999
val_ans.bits[2] = 0x204FCE5E;
val_ans.bits[1] = 0x3E250261;
val_ans.bits[0] = 0x0FFFFFFF;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80000000;  // -79228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -79228162514264337593543950335
val_ans.bits[2] = 0xFFFFFFFF;
val_ans.bits[1] = 0xFFFFFFFF;
val_ans.bits[0] = 0xFFFFFFFF;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80010000;  // -7922816251426433759354395033,5
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -7922816251426433759354395034
val_ans.bits[2] = 0x19999999;
val_ans.bits[1] = 0x99999999;
val_ans.bits[0] = 0x9999999A;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80020000;  // -792281625142643375935439503,35
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -792281625142643375935439504
val_ans.bits[2] = 0x028F5C28;
val_ans.bits[1] = 0xF5C28F5C;
val_ans.bits[0] = 0x28F5C290;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x800F0000;  // -79228162514264,337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -79228162514265
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x0000480E;
val_ans.bits[0] = 0xBE7B9D59;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80100000;  // -7922816251426,4337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -7922816251427
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000734;
val_ans.bits[0] = 0xACA5F623;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80110000;  // -792281625142,64337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -792281625143
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x000000B8;
val_ans.bits[0] = 0x77AA3237;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80120000;  // -79228162514,264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -79228162515
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000012;
val_ans.bits[0] = 0x725DD1D3;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80130000;  // -7922816251,4264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -7922816252
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000001;
val_ans.bits[0] = 0xD83C94FC;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80140000;  // -792281625,14264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -792281626
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x2F39421A;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80150000;  // -79228162,514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -79228163
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x04B8ED03;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801B0000;  // -79,228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -80
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000050;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -7,9228162514264337593543950335
val1.bits[2] = 0xFFFFFFFF;
val1.bits[1] = 0xFFFFFFFF;
val1.bits[0] = 0xFFFFFFFF;
val_ans.bits[3] = 0x80000000;  // -8
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000008;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,1000000000000000000000000000
val1.bits[2] = 0x033B2E3C;
val1.bits[1] = 0x9FD0803C;
val1.bits[0] = 0xE8000000;
val_ans.bits[3] = 0x80000000;  // -1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0100000000000000000000000000
val1.bits[2] = 0x0052B7D2;
val1.bits[1] = 0xDCC80CD2;
val1.bits[0] = 0xE4000000;
val_ans.bits[3] = 0x80000000;  // -1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0000000000000000000000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val_ans.bits[3] = 0x80000000;  // -1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801B0000;  // -9,999999999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x80000000;  // -10
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000000A;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801A0000;  // -99,99999999999999999999999999
val1.bits[2] = 0x204FCE5E;
val1.bits[1] = 0x3E250261;
val1.bits[0] = 0x0FFFFFFF;
val_ans.bits[3] = 0x80000000;  // -100
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000064;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,0000000000000000000000000001
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x00000001;
val_ans.bits[3] = 0x80000000;  // -1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,4999999999999999999999999999
val1.bits[2] = 0x1027E72F;
val1.bits[1] = 0x1F128130;
val1.bits[0] = 0x87FFFFFF;
val_ans.bits[3] = 0x80000000;  // -1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,5000000000000000000000000000
val1.bits[2] = 0x1027E72F;
val1.bits[1] = 0x1F128130;
val1.bits[0] = 0x88000000;
val_ans.bits[3] = 0x80000000;  // -1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -0,5000000000000000000000000001
val1.bits[2] = 0x1027E72F;
val1.bits[1] = 0x1F128130;
val1.bits[0] = 0x88000001;
val_ans.bits[3] = 0x80000000;  // -1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -1,4999999999999999999999999999
val1.bits[2] = 0x3077B58D;
val1.bits[1] = 0x5D378391;
val1.bits[0] = 0x97FFFFFF;
val_ans.bits[3] = 0x80000000;  // -2
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000002;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -1,5000000000000000000000000000
val1.bits[2] = 0x3077B58D;
val1.bits[1] = 0x5D378391;
val1.bits[0] = 0x98000000;
val_ans.bits[3] = 0x80000000;  // -2
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000002;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -1,5000000000000000000000000001
val1.bits[2] = 0x3077B58D;
val1.bits[1] = 0x5D378391;
val1.bits[0] = 0x98000001;
val_ans.bits[3] = 0x80000000;  // -2
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000002;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -2,4999999999999999999999999999
val1.bits[2] = 0x50C783EB;
val1.bits[1] = 0x9B5C85F2;
val1.bits[0] = 0xA7FFFFFF;
val_ans.bits[3] = 0x80000000;  // -3
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000003;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -2,5000000000000000000000000000
val1.bits[2] = 0x50C783EB;
val1.bits[1] = 0x9B5C85F2;
val1.bits[0] = 0xA8000000;
val_ans.bits[3] = 0x80000000;  // -3
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000003;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -2,5000000000000000000000000001
val1.bits[2] = 0x50C783EB;
val1.bits[1] = 0x9B5C85F2;
val1.bits[0] = 0xA8000001;
val_ans.bits[3] = 0x80000000;  // -3
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000003;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -3,4999999999999999999999999999
val1.bits[2] = 0x71175249;
val1.bits[1] = 0xD9818853;
val1.bits[0] = 0xB7FFFFFF;
val_ans.bits[3] = 0x80000000;  // -4
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000004;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -3,5000000000000000000000000000
val1.bits[2] = 0x71175249;
val1.bits[1] = 0xD9818853;
val1.bits[0] = 0xB8000000;
val_ans.bits[3] = 0x80000000;  // -4
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000004;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -3,5000000000000000000000000001
val1.bits[2] = 0x71175249;
val1.bits[1] = 0xD9818853;
val1.bits[0] = 0xB8000001;
val_ans.bits[3] = 0x80000000;  // -4
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000004;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -4,4999999999999999999999999999
val1.bits[2] = 0x916720A8;
val1.bits[1] = 0x17A68AB4;
val1.bits[0] = 0xC7FFFFFF;
val_ans.bits[3] = 0x80000000;  // -5
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000005;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -4,5000000000000000000000000000
val1.bits[2] = 0x916720A8;
val1.bits[1] = 0x17A68AB4;
val1.bits[0] = 0xC8000000;
val_ans.bits[3] = 0x80000000;  // -5
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000005;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -4,5000000000000000000000000001
val1.bits[2] = 0x916720A8;
val1.bits[1] = 0x17A68AB4;
val1.bits[0] = 0xC8000001;
val_ans.bits[3] = 0x80000000;  // -5
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000005;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -5,4999999999999999999999999999
val1.bits[2] = 0xB1B6EF06;
val1.bits[1] = 0x55CB8D15;
val1.bits[0] = 0xD7FFFFFF;
val_ans.bits[3] = 0x80000000;  // -6
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000006;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -5,5000000000000000000000000000
val1.bits[2] = 0xB1B6EF06;
val1.bits[1] = 0x55CB8D15;
val1.bits[0] = 0xD8000000;
val_ans.bits[3] = 0x80000000;  // -6
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000006;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -5,5000000000000000000000000001
val1.bits[2] = 0xB1B6EF06;
val1.bits[1] = 0x55CB8D15;
val1.bits[0] = 0xD8000001;
val_ans.bits[3] = 0x80000000;  // -6
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000006;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -6,4999999999999999999999999999
val1.bits[2] = 0xD206BD64;
val1.bits[1] = 0x93F08F76;
val1.bits[0] = 0xE7FFFFFF;
val_ans.bits[3] = 0x80000000;  // -7
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000007;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -6,5000000000000000000000000000
val1.bits[2] = 0xD206BD64;
val1.bits[1] = 0x93F08F76;
val1.bits[0] = 0xE8000000;
val_ans.bits[3] = 0x80000000;  // -7
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000007;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -6,5000000000000000000000000001
val1.bits[2] = 0xD206BD64;
val1.bits[1] = 0x93F08F76;
val1.bits[0] = 0xE8000001;
val_ans.bits[3] = 0x80000000;  // -7
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000007;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -7,4999999999999999999999999999
val1.bits[2] = 0xF2568BC2;
val1.bits[1] = 0xD21591D7;
val1.bits[0] = 0xF7FFFFFF;
val_ans.bits[3] = 0x80000000;  // -8
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000008;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -7,5000000000000000000000000000
val1.bits[2] = 0xF2568BC2;
val1.bits[1] = 0xD21591D7;
val1.bits[0] = 0xF8000000;
val_ans.bits[3] = 0x80000000;  // -8
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000008;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801C0000;  // -7,5000000000000000000000000001
val1.bits[2] = 0xF2568BC2;
val1.bits[1] = 0xD21591D7;
val1.bits[0] = 0xF8000001;
val_ans.bits[3] = 0x80000000;  // -8
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000008;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801B0000;  // -8,500000000000000000000000000
val1.bits[2] = 0x1B770903;
val1.bits[1] = 0x4E6C4205;
val1.bits[0] = 0xB4000000;
val_ans.bits[3] = 0x80000000;  // -9
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000009;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801B0000;  // -8,500000000000000000000000000
val1.bits[2] = 0x1B770903;
val1.bits[1] = 0x4E6C4205;
val1.bits[0] = 0xB4000000;
val_ans.bits[3] = 0x80000000;  // -9
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000009;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801B0000;  // -8,500000000000000000000000000
val1.bits[2] = 0x1B770903;
val1.bits[1] = 0x4E6C4205;
val1.bits[0] = 0xB4000000;
val_ans.bits[3] = 0x80000000;  // -9
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000009;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801B0000;  // -9,500000000000000000000000000
val1.bits[2] = 0x1EB2373F;
val1.bits[1] = 0xEE3CC242;
val1.bits[0] = 0x9C000000;
val_ans.bits[3] = 0x80000000;  // -10
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000000A;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801B0000;  // -9,500000000000000000000000000
val1.bits[2] = 0x1EB2373F;
val1.bits[1] = 0xEE3CC242;
val1.bits[0] = 0x9C000000;
val_ans.bits[3] = 0x80000000;  // -10
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000000A;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x801B0000;  // -9,500000000000000000000000000
val1.bits[2] = 0x1EB2373F;
val1.bits[1] = 0xEE3CC242;
val1.bits[0] = 0x9C000000;
val_ans.bits[3] = 0x80000000;  // -10
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000000A;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80090000;  // -0,123456789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x80000000;  // -1
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000001;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80080000;  // -1,23456789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x80000000;  // -2
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00000002;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80070000;  // -12,3456789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x80000000;  // -13
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000000D;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80060000;  // -123,456789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x80000000;  // -124
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000007C;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80050000;  // -1234,56789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x80000000;  // -1235
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x000004D3;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80040000;  // -12345,6789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x80000000;  // -12346
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0000303A;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80030000;  // -123456,789
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x80000000;  // -123457
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0001E241;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80020000;  // -1234567,89
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x80000000;  // -1234568
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x0012D688;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

val1.bits[3] = 0x80010000;  // -12345678,9
val1.bits[2] = 0x00000000;
val1.bits[1] = 0x00000000;
val1.bits[0] = 0x075BCD15;
val_ans.bits[3] = 0x80000000;  // -12345679
val_ans.bits[2] = 0x00000000;
val_ans.bits[1] = 0x00000000;
val_ans.bits[0] = 0x00BC614F;
int_res = s21_floor(val1, &val2);
ck_assert_mem_eq(&val2, &val_ans, SIZE_OF_DECIMAL);

ck_assert_int_eq(int_res, 0);

#test floor_0test
s21_decimal val = {{2, 0, 0, 0}};
s21_decimal res = {0};
ck_assert_int_eq(0, s21_floor(val, &res));

#test floor_1test
s21_decimal val = {{2, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal res = {0};
ck_assert_int_eq(0, s21_floor(val, &res));

#test floor_2test
s21_decimal val = {{2, 0, 0, ~(UINT_MAX / 2)}};
s21_decimal res = {0};
set_exp(&val, 5);
ck_assert_int_eq(0, s21_floor(val, &res));

#test floor_3test
s21_decimal val = {{2, 0, 0, 0}};
s21_decimal res = {0};
set_exp(&val, 5);
ck_assert_int_eq(0, s21_floor(val, &res));

#test from_decimal_to_float_2808

s21_decimal var_a = {{1247254251, 106306775, 0, 0}};
// var: 456584123215484651
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 4.5658413E+17);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2809

s21_decimal var_a = {{-1, -1, 0, 0}};
// var: 18446744073709551615
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 1.8446744E+19);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2810

s21_decimal var_a = {{2, -1, 0, 0}};
// var: 18446744069414584322
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 1.8446744E+19);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2811

s21_decimal var_a = {{0, -1, 0, 0}};
// var: 18446744069414584320
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 1.8446744E+19);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2812

s21_decimal var_a = {{0, -1, 0, 65536}};
// var: 1844674406941458432,0
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 1.8446744E+18);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2813

s21_decimal var_a = {{-1, -1, -1, 0}};
// var: 79228162514264337593543950335
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 7.9228163E+28);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2814

s21_decimal var_a = {{-2, -1, -1, 0}};
// var: 79228162514264337593543950334
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 7.9228163E+28);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2815

s21_decimal var_a = {{-6, -1, -1, 0}};
// var: 79228162514264337593543950330
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 7.9228163E+28);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2816

s21_decimal var_a = {{-7, -1, -1, 0}};
// var: 79228162514264337593543950329
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 7.9228163E+28);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2817

s21_decimal var_a = {{1, 0, 0, 1769472}};
// var: 0,000000000000000000000000001
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 1E-27);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2818

s21_decimal var_a = {{-1717986919, -1717986919, 429496729, 0}};
// var: 7922816251426433759354395033
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 7.9228164E+27);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2819

s21_decimal var_a = {{-1, -1, -1, 65536}};
// var: 7922816251426433759354395033,5
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 7.9228164E+27);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2820

s21_decimal var_a = {{5, 0, 0, 65536}};
// var: 0,5
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 0.5);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2821

s21_decimal var_a = {{-1, -1, -1, 1441792}};
// var: 7922816,2514264337593543950335
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 7922816.5);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2822

s21_decimal var_a = {{32000023, 0, 0, 1572864}};
// var: 0,000000000000000032000023
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 3.2000025E-17);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2823

s21_decimal var_a = {{1215752192, 23, 0, 0}};
// var: 100000000000
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 1E+11);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2824

s21_decimal var_a = {{-559939581, 902409669, 54, 524288}};
// var: 10000000000000,00000003
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 1E+13);
ck_assert_int_eq(return_res, 0);

// #test from_decimal_to_float_2825

// s21_decimal var_a = {{ 0, 0, 0, 0 }};
//  var: 0
// float res_float;
//   int return_res = s21_from_decimal_to_float(var_a, &res_float);
//   ck_assert_float_eq(res_float, 0);
//   ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2826

s21_decimal var_a = {{1, 0, 0, 65536}};
// var: 0,1
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 0.1);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2827

s21_decimal var_a = {{11, 0, 0, 131072}};
// var: 0,11
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 0.11);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2828

s21_decimal var_a = {{15, 0, 0, 131072}};
// var: 0,15
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 0.15);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2829

s21_decimal var_a = {{19, 0, 0, 131072}};
// var: 0,19
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 0.19);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2830

s21_decimal var_a = {{2, 0, 0, 65536}};
// var: 0,2
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 0.2);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2831

s21_decimal var_a = {{25, 0, 0, 131072}};
// var: 0,25
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 0.25);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2832

s21_decimal var_a = {{29, 0, 0, 131072}};
// var: 0,29
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 0.29);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2833

s21_decimal var_a = {{1, 0, 0, 131072}};
// var: 0,01
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 0.01);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2834

s21_decimal var_a = {{13, 0, 0, 196608}};
// var: 0,013
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 0.013);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2835

s21_decimal var_a = {{15, 0, 0, 196608}};
// var: 0,015
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 0.015);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2836

s21_decimal var_a = {{19, 0, 0, 196608}};
// var: 0,019
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 0.019);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2837

s21_decimal var_a = {{2633, 0, 0, 65536}};
// var: 263,3
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 263.3);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2838

s21_decimal var_a = {{4545, 0, 0, 131072}};
// var: 45,45
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 45.45);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2839

s21_decimal var_a = {{-2065946901, 261, 0, 786432}};
// var: 1,123215484651
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 1.1232154);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2840

s21_decimal var_a = {{13, 0, 0, 65536}};
// var: 1,3
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 1.3);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2841

s21_decimal var_a = {{3, 0, 0, 131072}};
// var: 0,03
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 0.03);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2842

s21_decimal var_a = {{103, 0, 0, -2147418112}};
// var: -10,3
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -10.3);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2843

s21_decimal var_a = {{3, 0, 0, -2147352576}};
// var: -0,03
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -0.03);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2844

s21_decimal var_a = {{1, 0, 0, 0}};
// var: 1
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 1);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2845

s21_decimal var_a = {{1247254251, 106306775, 0, 786432}};
// var: 456584,123215484651
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 456584.12);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2846

s21_decimal var_a = {{100, 0, 0, 0}};
// var: 100
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 100);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2847

s21_decimal var_a = {{1154117208, -723130738, 1934867432, 1638400}};
// var: 3569,2004350000540053542694488
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 3569.2004);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2848

s21_decimal var_a = {{1658186091, 1178893276, 1017430641, -2147024896}};
// var: -1876828265234056841604,1953643
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -1.8768283E+21);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2849

s21_decimal var_a = {{-1305433484, 1821829559, -812355569, -2145910784}};
// var: -64242,847243893335227574037108
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -64242.848);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2850

s21_decimal var_a = {{1285366892, 637532703, -365934786, 851968}};
// var: 7247785717199284,6707587884140
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 7.247786E+15);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2851

s21_decimal var_a = {{-1245186142, -214810203, -947436158, 1114112}};
// var: 617510501989,83832482605430690
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 6.175105E+11);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2852

s21_decimal var_a = {{-1166260981, 1725516223, -903651592, 1179648}};
// var: 62558732872,251171679770526987
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 6.2558732E+10);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2853

s21_decimal var_a = {{1460438271, 1038166689, 141013754, 1638400}};
// var: 260,1244635369928557540967679
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 260.12445);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2854

s21_decimal var_a = {{-83450613, 841935470, 192758737, 917504}};
// var: 35557710930265,73387540374795
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 3.555771E+13);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2855

s21_decimal var_a = {{-515691382, 1443426893, 1577186838, 1703936}};
// var: 290,93961963208677947017997450
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 290.9396);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2856

s21_decimal var_a = {{1301430912, -144122260, -1075666338, 720896}};
// var: 593856208863017258,12824621696
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 5.938562E+17);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2857

s21_decimal var_a = {{1355333617, 564437954, -2022003929, -2146566144}};
// var: -419287735223904,01175570137073
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -4.1928773E+14);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2858

s21_decimal var_a = {{-930381694, -468464953, -803548548, -2147418112}};
// var: -6440530811494212484339305689,8
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -6.440531E+27);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2859

s21_decimal var_a = {{-1850756687, -1214646346, 2108697257, -2146893824}};
// var: -38898598642042215051,236979121
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -3.8898597E+19);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2860

s21_decimal var_a = {{-782086610, -417738881, 683231620, -2146762752}};
// var: -126033988538585456,05133094446
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -1.26033986E+17);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2861

s21_decimal var_a = {{299801969, 1556704720, -358707138, -2146304000}};
// var: -72611183748,851519152333954417
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -7.2611185E+10);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2862

s21_decimal var_a = {{717099147, -347344803, 1864181378, -2146631680}};
// var: -3438807680389611,5008383094923
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -3.4388077E+15);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2863

s21_decimal var_a = {{849192132, -2045033396, 39307543, 65536}};
// var: 72509619555072588916756602,0
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 7.2509618E+25);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2864

s21_decimal var_a = {{-75768374, -1132580508, 265960975, -2146107392}};
// var: -4906114,053001612050585869770
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -4906114);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2865

s21_decimal var_a = {{1210761817, -23061980, -304438644, -2145845248}};
// var: -7361,2260780596859274760208985
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -7361.226);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2866

s21_decimal var_a = {{-741613379, -242905554, 1505329271, -2146500608}};
// var: -27768423826204,242266666295485
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -2.7768423E+13);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2867

s21_decimal var_a = {{307536721, 348087820, -821252524, 1114112}};
// var: 640787273856,43352089339142993
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 6.407873E+11);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2868

s21_decimal var_a = {{-1788525674, 1863272075, 1227349276, 1376256}};
// var: 22640597,991427401438363730838
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 22640598);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2869

s21_decimal var_a = {{1247026993, 1558909310, 1825390868, -2147024896}};
// var: -3367251818317799890934,7995441
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -3.367252E+21);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2870

s21_decimal var_a = {{742648442, 1721647843, -956076292, 1572864}};
// var: 61591,667848193555981192653434
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 61591.668);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2871

s21_decimal var_a = {{1028190187, -505846483, -1416926934, -2146238464}};
// var: -5309047400,7894542589226446827
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -5.3090473E+09);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2872

s21_decimal var_a = {{1994743893, -1778513586, 1805209748, 65536}};
// var: 3330024223152979948625496482,1
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 3.3300242E+27);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2873

s21_decimal var_a = {{-203695990, -1788203941, 1216693764, -2145845248}};
// var: -2244,4038491352834431050832010
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -2244.4038);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2874

s21_decimal var_a = {{-1453724461, 1487106033, 650671058, -2146566144}};
// var: -120027624894828,95714948869331
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -1.2002763E+14);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2875

s21_decimal var_a = {{-638553261, 1491696444, -72653750, -2146435072}};
// var: -7788793738842,5849704018899795
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -7.7887937E+12);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2876

s21_decimal var_a = {{-2080906096, 1831646079, 1486591576, 1114112}};
// var: 274227743524,71402512448480400
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 2.7422774E+11);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2877

s21_decimal var_a = {{-1678244921, -208498721, 2089918608, -2146238464}};
// var: -3855219371,4210564397988316103
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -3.8552195E+09);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2878

s21_decimal var_a = {{565861205, -1938234573, -2103196110, 655360}};
// var: 4043104214639494533,6192424789
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 4.043104E+18);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2879

s21_decimal var_a = {{1283575365, -703944649, 859395997, -2146762752}};
// var: -158530580300527864,28799209029
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -1.5853058E+17);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2880

s21_decimal var_a = {{860679119, 1202754940, 1434413705, -2145976320}};
// var: -264602,62517122304160658418639
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -264602.62);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2881

s21_decimal var_a = {{-2002720184, 1827077641, -1813574335, 1441792}};
// var: 4577362,0905718585256048650824
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 4577362);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2882

s21_decimal var_a = {{1307737190, 1237910691, 421235378, -2147221504}};
// var: -777042121807508877169776,9574
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -7.7704214E+23);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2883

s21_decimal var_a = {{1260579160, 2132365406, 1724133364, -2146369536}};
// var: -318046469238,10352869778057560
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -3.1804647E+11);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2884

s21_decimal var_a = {{246275338, -529242797, 1314509131, 1703936}};
// var: 242,48413538285006210345065738
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 242.48413);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2885

s21_decimal var_a = {{-1442448921, -576614348, 1999148467, 786432}};
// var: 36877780152067989,425881479655
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 3.687778E+16);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2886

s21_decimal var_a = {{-1560655418, 255898630, -1639710417, -2145714176}};
// var: -48,980844097968846226065082822
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -48.980843);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2887

s21_decimal var_a = {{-457738642, -72207960, 2074740929, 1310720}};
// var: 382722149,54650012846789195374
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 382722140);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2888

s21_decimal var_a = {{1709997737, -973962161, 989578493, -2146893824}};
// var: -18254501215481787454,250057385
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -1.8254501E+19);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2889

s21_decimal var_a = {{-2013201258, -660961057, -1290409599, 720896}};
// var: 554243069068611066,02518314134
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 5.5424306E+17);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2890

s21_decimal var_a = {{-1346366512, 359625405, 2008660465, -2146304000}};
// var: -37053245530,378001580170417104
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -3.7053247E+10);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2891

s21_decimal var_a = {{5086658, -1491845999, 944110164, 983040}};
// var: 17415758584735,267161889414594
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 1.7415759E+13);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2892

s21_decimal var_a = {{1045355979, -1999430158, 1187295283, -2147418112}};
// var: -2190173223528281188123062215,5
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -2.1901732E+27);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2893

s21_decimal var_a = {{-1702498211, 980419130, 682085681, -2145910784}};
// var: -12582,259997959761812519252061
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -12582.26);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2894

s21_decimal var_a = {{-2053160457, 863596354, -165896423, 65536}};
// var: 7616791366014859273913232639,1
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 7.616791E+27);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2895

s21_decimal var_a = {{1313097424, -969560206, 404101582, -2146959360}};
// var: -74543584772176691152,85882576
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -7.454358E+19);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2896

s21_decimal var_a = {{661407343, -1553033564, -1610874763, -2146893824}};
// var: -49512768038182324810,684319343
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -4.951277E+19);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2897

s21_decimal var_a = {{302616237, -1509040460, 1730278717, 1245184}};
// var: 3191800868,0650981050749128365
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 3.1918008E+09);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2898

s21_decimal var_a = {{-1831142844, 1284384030, 1815152676, -2146500608}};
// var: -33483656874397,421269361031748
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -3.3483657E+13);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2899

s21_decimal var_a = {{-945175173, 441845938, -171017508, -2145976320}};
// var: -760734,46313962475617308493179
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -760734.44);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2900

s21_decimal var_a = {{-1952408546, 57756320, 296284906, -2145845248}};
// var: -546,5491834133153079728577566
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -546.5492);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2901

s21_decimal var_a = {{-1480106143, -1477776210, 985630399, -2147418112}};
// var: -1818167173372097435315675939,3
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -1.8181672E+27);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2902

s21_decimal var_a = {{-1809093796, -1207103413, 145078817, 1048576}};
// var: 267623182097,7816944520162140
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 2.6762319E+11);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2903

s21_decimal var_a = {{844298982, 1858359997, -1753197927, 1507328}};
// var: 468873,69052318811912427207398
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 468873.7);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2904

s21_decimal var_a = {{1209079384, 940886326, 855555454, -2145714176}};
// var: -15,782212504845460897595987544
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -15.782212);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2905

s21_decimal var_a = {{-355020868, 1074097545, -571472879, -2147090432}};
// var: -68686348574898565754178,162620
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -6.868635E+22);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2906

s21_decimal var_a = {{623519796, -1812995929, 1787774470, 327680}};
// var: 329786181202617204257289,76948
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 3.2978617E+23);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2907

s21_decimal var_a = {{1093188884, 1542239376, 603737019, -2146041856}};
// var: -1113698,2283941188648087108884
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -1113698.2);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2908

s21_decimal var_a = {{1965932406, -1799148618, 1119623770, 1179648}};
// var: 20653413154,751305666037399414
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 2.0653412E+10);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2909

s21_decimal var_a = {{1265894500, 1849191932, -278613845, -2147287040}};
// var: -74088644228099374877817177,188
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -7.4088645E+25);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2910

s21_decimal var_a = {{-26552198, 931290311, -480178553, -2147155968}};
// var: -703704316413890211893893,42842
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -7.037043E+23);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2911

s21_decimal var_a = {{1645325087, 1947804531, -1091816238, -2146369536}};
// var: -590877078047,23737004786952991
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -5.908771E+11);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2912

s21_decimal var_a = {{2068133005, 1988396287, 1226553352, 851968}};
// var: 2262591578563468,2635242779789
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 2.2625915E+15);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2913

s21_decimal var_a = {{2037113516, 1938489710, -1888332110, 262144}};
// var: 4439458336325213437346839,8252
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 4.4394583E+24);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2914

s21_decimal var_a = {{-924773554, -21457979, -238183159, -2145714176}};
// var: -74,834458755878250500208005966
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -74.83446);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2915

s21_decimal var_a = {{1553825488, 1412433099, 989757683, 589824}};
// var: 18257806679355100991,967821520
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 1.8257806E+19);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2916

s21_decimal var_a = {{-375577331, 1186729570, -623967570, 1507328}};
// var: 677179,92445276852482184389901
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 677179.94);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2917

s21_decimal var_a = {{-1662185063, 314333410, 642228120, -2146631680}};
// var: -1184701776792967,8479009583513
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -1.1847018E+15);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2918

s21_decimal var_a = {{1449230134, 2054179033, 1671296750, -2145976320}};
// var: -308299,83427295165828091182902
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -308299.84);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2919

s21_decimal var_a = {{255702785, 149068020, 670015529, 1048576}};
// var: 1235960498951,4362489382221569
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 1.2359605E+12);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2920

s21_decimal var_a = {{-905824255, 2097351105, -1042892389, -2146893824}};
// var: -59990193526969845624,208504833
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -5.9990194E+19);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2921

s21_decimal var_a = {{-1025409063, -2078314211, -893295078, -2146172928}};
// var: -627497768,37614378443306270681
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -627497800);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2922

s21_decimal var_a = {{-1897425334, -666258139, 1344197733, -2146828288}};
// var: -2479607158069675134,1081957962
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -2.479607E+18);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2923

s21_decimal var_a = {{-251150219, -667915001, 1905827348, -2145845248}};
// var: -3515,6309352810662270540955765
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -3515.6309);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2924

s21_decimal var_a = {{-1261500877, -1878856818, -1902842474, -2146762752}};
// var: -441269143941791315,28690206259
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -4.4126913E+17);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2925

s21_decimal var_a = {{-1919113689, 2053948529, 1029432735, -2145714176}};
// var: -18,989682212465507077780710951
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -18.989683);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2926

s21_decimal var_a = {{-966876614, 133568055, 203889225, 1179648}};
// var: 3761092353,535653785427157562
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 3.7610924E+09);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2927

s21_decimal var_a = {{-1507207924, -1660263147, 973642255, -2145845248}};
// var: -1796,0529508650422207819404556
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -1796.053);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2928

s21_decimal var_a = {{-1330323863, -1483691420, -432303055, -2147155968}};
// var: -712535787084708911976853,58185
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -7.1253575E+23);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2929

s21_decimal var_a = {{-1029305292, -32956324, 745617709, -2146304000}};
// var: -13754219073,053840750538001460
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -1.375422E+10);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2930

s21_decimal var_a = {{1564271208, 60356785, -1192768218, -2147090432}};
// var: -57225472457822965482179,584616
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -5.722547E+22);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2931

s21_decimal var_a = {{-1454005984, -1504826447, 833906603, 458752}};
// var: 1538286169890107749728,1356064
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 1.5382862E+21);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2932

s21_decimal var_a = {{1950883350, 845602438, -1862548382, -2145910784}};
// var: -44870,209190240358311796416022
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -44870.21);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2933

s21_decimal var_a = {{-1003394844, 1266683399, -624113508, -2146435072}};
// var: -6771530036468,3622537757812964
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -6.7715303E+12);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2934

s21_decimal var_a = {{-389092150, -1761082176, -1442450099, -2147418112}};
// var: -5261965470979728529392605101,8
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -5.2619653E+27);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2935

s21_decimal var_a = {{628557633, 695685056, 1139794528, -2147221504}};
// var: -2102549795761852015771484,3457
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -2.1025498E+24);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2936

s21_decimal var_a = {{1967076858, 1150938010, 562308656, -2147024896}};
// var: -1037276387260682401819,5985914
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -1.0372764E+21);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2937

s21_decimal var_a = {{418395111, -1988028940, -168353489, -2146500608}};
// var: -76122588798673,486199691162599
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -7.612259E+13);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2938

s21_decimal var_a = {{557179956, -2095646843, 2064572019, -2146959360}};
// var: -380846316656808232190,45917748
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -3.808463E+20);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2939

s21_decimal var_a = {{436195766, -678704977, 1268235222, -2145779712}};
// var: -233,94810581029945951536533942
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -233.9481);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2940

s21_decimal var_a = {{-307790212, 1494243531, -972619420, -2146697216}};
// var: -61286500998822243,354221706876
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -6.12865E+16);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2941

s21_decimal var_a = {{1387892636, -988779906, 6130221, -2147090432}};
// var: -113082632102246557102,477212
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -1.1308263E+20);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2942

s21_decimal var_a = {{491328770, -349906106, -50903637, 0}};
// var: 78289156167048234126910493954
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, 7.828916E+28);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2943

s21_decimal var_a = {{1544677285, -100354765, -1678024156, -2146435072}};
// var: -4827408037704,5589095548577701
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -4.827408E+12);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2944

s21_decimal var_a = {{2017939176, -768692112, 975594078, -2146304000}};
// var: -17996534291,837870642599251688
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -1.7996534E+10);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2945

s21_decimal var_a = {{448382535, -2048025967, -5201153, -2146172928}};
// var: -791322181,85635670462561896007
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -791322200);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_float_2946

s21_decimal var_a = {{-1927696067, -510143059, -513202440, -2147483648}};
// var: -69761248461836752174297231677
float res_float;
int return_res = s21_from_decimal_to_float(var_a, &res_float);
ck_assert_float_eq(res_float, -6.976125E+28);
ck_assert_int_eq(return_res, 0);

//#test from_float_to_decimal_2569
// s21_decimal s21_res;
// float res_float = 4562.25;
//  int return_res = s21_from_float_to_decimal(res_float, &s21_res);
// var: 4562,25
//  ck_assert_int_eq(s21_res.bits[0], 456225);
//  ck_assert_int_eq(s21_res.bits[1], 0);
//  ck_assert_int_eq(s21_res.bits[2], 0);
//  ck_assert_int_eq(s21_res.bits[3], 131072);
//  ck_assert_int_eq(return_res, 0);

//#test from_float_to_decimal_2570
// s21_decimal s21_res;
// float res_float = 4562.25;
//  int return_res = s21_from_float_to_decimal(res_float, &s21_res);
// var: 4562,25
//  ck_assert_int_eq(s21_res.bits[0], 456225);
//  ck_assert_int_eq(s21_res.bits[1], 0);
//  ck_assert_int_eq(s21_res.bits[2], 0);
//  ck_assert_int_eq(s21_res.bits[3], 131072);
//  ck_assert_int_eq(return_res, 0);

#test from_float_to_decimal_2571
s21_decimal s21_res;
float res_float = 0;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
// var: 0
ck_assert_int_eq(s21_res.bits[0], 0);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_float_to_decimal_2572
s21_decimal s21_res;
float res_float = -0;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
// var: 0
ck_assert_int_eq(s21_res.bits[0], 0);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

//#test from_float_to_decimal_2573
// s21_decimal s21_res;
// float res_float = 1;
//  int return_res = s21_from_float_to_decimal(res_float, &s21_res);
// var: 1
//  ck_assert_int_eq(s21_res.bits[0], 1);
//  ck_assert_int_eq(s21_res.bits[1], 0);
//  ck_assert_int_eq(s21_res.bits[2], 0);
//  ck_assert_int_eq(s21_res.bits[3], 0);
//  ck_assert_int_eq(return_res, 0);

#test from_float_to_decimal_2574
s21_decimal s21_res;
float res_float = -1;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
// var: -1
ck_assert_int_eq(s21_res.bits[0], 1);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
set_sign(&s21_res, 1);
//  ck_assert_int_eq(s21_res.bits[3], -2147483648);
ck_assert_int_eq(return_res, 0);

//#test from_float_to_decimal_2575
// s21_decimal s21_res;
// float res_float = 1;
//  int return_res = s21_from_float_to_decimal(res_float, &s21_res);
// var: 1
//  ck_assert_int_eq(s21_res.bits[0], 1);
//  ck_assert_int_eq(s21_res.bits[1], 0);
//  ck_assert_int_eq(s21_res.bits[2], 0);
//  ck_assert_int_eq(s21_res.bits[3], 0);
//  ck_assert_int_eq(return_res, 0);

#test from_float_to_decimal_2576
s21_decimal s21_res;
float res_float = -1;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
// var: -1
ck_assert_int_eq(s21_res.bits[0], 1);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
set_sign(&s21_res, 1);
//  ck_assert_int_eq(s21_res.bits[3], -2147483648);
ck_assert_int_eq(return_res, 0);

//#test from_float_to_decimal_2577
// s21_decimal s21_res;
// float res_float = 789.887;
//  int return_res = s21_from_float_to_decimal(res_float, &s21_res);
// var: 789,887
//  ck_assert_int_eq(s21_res.bits[0], 789887);
//  ck_assert_int_eq(s21_res.bits[1], 0);
//  ck_assert_int_eq(s21_res.bits[2], 0);
//  ck_assert_int_eq(s21_res.bits[3], 196608);
//  ck_assert_int_eq(return_res, 0);

#test from_float_to_decimal_2578
s21_decimal s21_res;
float res_float = -72123.26;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
// var: -72123,26
ck_assert_int_eq(s21_res.bits[0], 7212326);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
set_sign(&s21_res, 1);
//  ck_assert_int_eq(s21_res.bits[3], -2147352576);
ck_assert_int_eq(return_res, 0);

#test from_float_to_decimal_2579
s21_decimal s21_res;
float res_float = -3.4028235E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2580
s21_decimal s21_res;
float res_float = -7.9228163E+28;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2581
s21_decimal s21_res;
float res_float = 7.9228163E+28;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2582
s21_decimal s21_res;
float res_float = -INFINITY;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

//#test from_float_to_decimal_2583
// s21_decimal s21_res;
// float res_float = -7.922816E+28;
//  int return_res = s21_from_float_to_decimal(res_float, &s21_res);
// var: -79228160000000000000000000000
//  ck_assert_int_eq(s21_res.bits[0], 536870912);
//  ck_assert_int_eq(s21_res.bits[1], -1282231782);
//  ck_assert_int_eq(s21_res.bits[2], -137);
//  ck_assert_int_eq(s21_res.bits[3], -2147483648);
//  ck_assert_int_eq(return_res, 0);

#test from_float_to_decimal_2584
s21_decimal s21_res;
float res_float = -1.919752E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2585
s21_decimal s21_res;
float res_float = 2.849784E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2586
s21_decimal s21_res;
float res_float = -1.3563916E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2587
s21_decimal s21_res;
float res_float = -3.1520305E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2588
s21_decimal s21_res;
float res_float = -5.453483E+37;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2589
s21_decimal s21_res;
float res_float = 4.3913917E+37;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2590
s21_decimal s21_res;
float res_float = 6.7228516E+37;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2591
s21_decimal s21_res;
float res_float = -6.5959714E+37;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2592
s21_decimal s21_res;
float res_float = -2.804405E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2593
s21_decimal s21_res;
float res_float = -8.894907E+37;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2594
s21_decimal s21_res;
float res_float = 2.5061909E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2595
s21_decimal s21_res;
float res_float = -8.975339E+35;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2596
s21_decimal s21_res;
float res_float = -1.8408019E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2597
s21_decimal s21_res;
float res_float = 1.4956455E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2598
s21_decimal s21_res;
float res_float = 2.1316587E+37;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2599
s21_decimal s21_res;
float res_float = -2.1481493E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2600
s21_decimal s21_res;
float res_float = -2.0094012E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2601
s21_decimal s21_res;
float res_float = -8.676927E+37;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2602
s21_decimal s21_res;
float res_float = 2.8103895E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2603
s21_decimal s21_res;
float res_float = 2.1025245E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2604
s21_decimal s21_res;
float res_float = 6.259615E+37;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2605
s21_decimal s21_res;
float res_float = 6.466764E+37;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2606
s21_decimal s21_res;
float res_float = 4.3116285E+37;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2607
s21_decimal s21_res;
float res_float = 1.8526089E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2608
s21_decimal s21_res;
float res_float = 2.6331393E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2609
s21_decimal s21_res;
float res_float = -1.3146125E+37;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2610
s21_decimal s21_res;
float res_float = -2.1035133E+37;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2611
s21_decimal s21_res;
float res_float = 3.289031E+37;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2612
s21_decimal s21_res;
float res_float = 3.0162598E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2613
s21_decimal s21_res;
float res_float = 1.8200499E+37;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2614
s21_decimal s21_res;
float res_float = -2.4007256E+37;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2615
s21_decimal s21_res;
float res_float = -1.749703E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2616
s21_decimal s21_res;
float res_float = -1.1713353E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2617
s21_decimal s21_res;
float res_float = -1.3926861E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2618
s21_decimal s21_res;
float res_float = -3.264152E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2619
s21_decimal s21_res;
float res_float = 1.5064513E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2620
s21_decimal s21_res;
float res_float = 9.3418395E+36;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2621
s21_decimal s21_res;
float res_float = -2.9578592E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2622
s21_decimal s21_res;
float res_float = 2.9152956E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2623
s21_decimal s21_res;
float res_float = -9.474881E+37;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2624
s21_decimal s21_res;
float res_float = 1.3920494E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2625
s21_decimal s21_res;
float res_float = -5.828115E+36;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2626
s21_decimal s21_res;
float res_float = -2.08887E+37;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2627
s21_decimal s21_res;
float res_float = -2.4224107E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2628
s21_decimal s21_res;
float res_float = -3.1400166E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2629
s21_decimal s21_res;
float res_float = 3.2015246E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2630
s21_decimal s21_res;
float res_float = -2.5127969E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2631
s21_decimal s21_res;
float res_float = 1.4184349E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2632
s21_decimal s21_res;
float res_float = 2.0932609E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2633
s21_decimal s21_res;
float res_float = 1.2507731E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2634
s21_decimal s21_res;
float res_float = 1.3948423E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2635
s21_decimal s21_res;
float res_float = -1.7373863E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2636
s21_decimal s21_res;
float res_float = -1.9191719E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2637
s21_decimal s21_res;
float res_float = -3.4008336E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2638
s21_decimal s21_res;
float res_float = 8.1910897E+37;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2639
s21_decimal s21_res;
float res_float = 1.7420731E+37;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2640
s21_decimal s21_res;
float res_float = 1.2057495E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2641
s21_decimal s21_res;
float res_float = 5.767745E+37;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2642
s21_decimal s21_res;
float res_float = -3.2301465E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2643
s21_decimal s21_res;
float res_float = 2.0672404E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2644
s21_decimal s21_res;
float res_float = -2.1875678E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2645
s21_decimal s21_res;
float res_float = -3.266133E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2646
s21_decimal s21_res;
float res_float = -3.190875E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2647
s21_decimal s21_res;
float res_float = 3.2454267E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2648
s21_decimal s21_res;
float res_float = 3.2200783E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2649
s21_decimal s21_res;
float res_float = -2.838802E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2650
s21_decimal s21_res;
float res_float = -2.6182782E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2651
s21_decimal s21_res;
float res_float = 1.1037109E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2652
s21_decimal s21_res;
float res_float = 3.2942077E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2653
s21_decimal s21_res;
float res_float = -1.5105124E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2654
s21_decimal s21_res;
float res_float = -1.1218091E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2655
s21_decimal s21_res;
float res_float = -3.3695465E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2656
s21_decimal s21_res;
float res_float = 3.2502012E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2657
s21_decimal s21_res;
float res_float = -2.2808379E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2658
s21_decimal s21_res;
float res_float = 2.7483164E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2659
s21_decimal s21_res;
float res_float = 2.3421654E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2660
s21_decimal s21_res;
float res_float = 1.1876028E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2661
s21_decimal s21_res;
float res_float = 1.3583212E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2662
s21_decimal s21_res;
float res_float = 3.0567559E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2663
s21_decimal s21_res;
float res_float = -2.6282212E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2664
s21_decimal s21_res;
float res_float = 3.0151534E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2665
s21_decimal s21_res;
float res_float = 2.741545E+37;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2666
s21_decimal s21_res;
float res_float = -3.0157071E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2667
s21_decimal s21_res;
float res_float = 7.173747E+37;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2668
s21_decimal s21_res;
float res_float = 2.2820335E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2669
s21_decimal s21_res;
float res_float = 2.423643E+37;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2670
s21_decimal s21_res;
float res_float = 1.5480611E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2671
s21_decimal s21_res;
float res_float = 4.8657906E+37;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2672
s21_decimal s21_res;
float res_float = -8.955204E+37;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2673
s21_decimal s21_res;
float res_float = 2.8401121E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2674
s21_decimal s21_res;
float res_float = 1.9607731E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2675
s21_decimal s21_res;
float res_float = -5.4929415E+37;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2676
s21_decimal s21_res;
float res_float = 2.2068596E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2677
s21_decimal s21_res;
float res_float = -6.315632E+37;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2678
s21_decimal s21_res;
float res_float = -3.0901423E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2679
s21_decimal s21_res;
float res_float = -8.892306E+37;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2680
s21_decimal s21_res;
float res_float = 3.1028428E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2681
s21_decimal s21_res;
float res_float = -9.331497E+37;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2682
s21_decimal s21_res;
float res_float = 2.3145874E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_float_to_decimal_2683
s21_decimal s21_res;
float res_float = 1.2286922E+38;
int return_res = s21_from_float_to_decimal(res_float, &s21_res);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2684

s21_decimal var_a = {{456484651, 0, 0, 0}};
// var: 456484651
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, 456484651);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2685

s21_decimal var_a = {{5536307, 1978594852, 247, 0}};
// var: 4564843786387638745651
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2686

s21_decimal var_a = {{9, 0, 0, 65536}};
// var: 0,9
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, 0);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2687

s21_decimal var_a = {{1, 0, 0, 0}};
// var: 1
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, 1);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2688

s21_decimal var_a = {{1247254251, 106306775, 0, 786432}};
// var: 456584,123215484651
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, 456584);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2689

s21_decimal var_a = {{1773925867, 106306979, 0, 786432}};
// var: 456584,999915484651
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, 456584);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2690

s21_decimal var_a = {{100, 0, 0, 0}};
// var: 100
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, 100);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2691

s21_decimal var_a = {{456484651, 0, 0, -2147483648}};
// var: -456484651
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, -456484651);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2692

s21_decimal var_a = {{5536307, 1978594852, 247, -2147483648}};
// var: -4564843786387638745651
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2693

s21_decimal var_a = {{9, 0, 0, -2147418112}};
// var: -0,9
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, 0);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2694

s21_decimal var_a = {{1, 0, 0, -2147483648}};
// var: -1
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, -1);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2695

s21_decimal var_a = {{1247254251, 106306775, 0, -2146697216}};
// var: -456584,123215484651
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, -456584);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2696

s21_decimal var_a = {{1773925867, 106306979, 0, -2146697216}};
// var: -456584,999915484651
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, -456584);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2697

s21_decimal var_a = {{100, 0, 0, -2147483648}};
// var: -100
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, -100);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2698

s21_decimal var_a = {{0, 0, 0, 0}};
// var: 0
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, 0);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2699

s21_decimal var_a = {{0, 0, 0, 0}};
// var: 0
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, 0);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2700

s21_decimal var_a = {{3, 0, 0, 65536}};
// var: 0,3
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, 0);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2701

s21_decimal var_a = {{3, 0, 0, -2147418112}};
// var: -0,3
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, 0);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2702

s21_decimal var_a = {{13, 0, 0, 65536}};
// var: 1,3
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, 1);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2703

s21_decimal var_a = {{13, 0, 0, -2147418112}};
// var: -1,3
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, -1);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2704

s21_decimal var_a = {{23, 0, 0, 65536}};
// var: 2,3
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, 2);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2705

s21_decimal var_a = {{23, 0, 0, -2147418112}};
// var: -2,3
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, -2);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2706

s21_decimal var_a = {{-1, 0, 0, 0}};
// var: 4294967295
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2707

s21_decimal var_a = {{-1, 0, 0, -2147483648}};
// var: -4294967295
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2708

s21_decimal var_a = {{-2071734720, 1168077367, -1510028084, 1048576}};
// var: 5137306090961,9202687022388800
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2709

s21_decimal var_a = {{-1464026915, 1713031135, -1136816345, -2145910784}};
// var: -58257,602346596847238539688157
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, -58257);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2710

s21_decimal var_a = {{-642384636, -130106818, -296013113, 786432}};
// var: 73767684394179211,310923119876
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2711

s21_decimal var_a = {{1878994404, 1116205746, -26322920, -2146238464}};
// var: -7874259035,0545674139676388836
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2712

s21_decimal var_a = {{-187026415, 1009246737, -209613927, 1769472}};
// var: 75,361468052944782755022648337
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, 75);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2713

s21_decimal var_a = {{9036878, 1059416535, 1121152321, 851968}};
// var: 2068160993768261,8244823376974
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2714

s21_decimal var_a = {{-687442481, 38950000, 995932895, -2146435072}};
// var: -1837171922882,0936109861533135
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2715

s21_decimal var_a = {{-1914568887, 1584118870, -953331699, 524288}};
// var: 616422966522603682609,41348681
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2716

s21_decimal var_a = {{568151951, 1988618421, 851667642, 1114112}};
// var: 157104950363,74739100662321039
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2717

s21_decimal var_a = {{-1892981849, 683785875, 1996567116, 1376256}};
// var: 36830162,617773208864603988903
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, 36830162);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2718

s21_decimal var_a = {{50725696, 37610774, -917893941, 524288}};
// var: 622960078979902198157,48764480
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2719

s21_decimal var_a = {{-739445607, 1857911171, -771016080, -2145714176}};
// var: -65,005426217769235769891550361
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, -65);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2720

s21_decimal var_a = {{-869069834, 58993161, -635565796, 1638400}};
// var: 6750,4042933702217448526384118
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, 6750);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2721

s21_decimal var_a = {{971674688, -316749816, 288184018, 1310720}};
// var: 53160568,43265620723624481856
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, 53160568);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2722

s21_decimal var_a = {{1348591765, 2105095221, 618849804, 196608}};
// var: 11415763963494632700998967,445
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2723

s21_decimal var_a = {{1170358998, 705661052, -1878139969, -2147155968}};
// var: -445825951745473377480371,24822
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2724

s21_decimal var_a = {{1602969323, 907004681, -1158133141, -2146369536}};
// var: -578643768628,51514502621126379
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2725

s21_decimal var_a = {{1970962100, -624634403, 671679158, -2146762752}};
// var: -123902935430346813,08831448756
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2726

s21_decimal var_a = {{1093534469, 2004982015, 1040790067, 393216}};
// var: 19199188009019349349543,314181
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2727

s21_decimal var_a = {{673596187, 1420596407, 942016361, -2145714176}};
// var: -17,377134730715602693799691035
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, -17);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2728

s21_decimal var_a = {{1237153239, -474026766, 1870899864, -2146828288}};
// var: -3451201099515682071,1423440343
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2729

s21_decimal var_a = {{1198751826, 1666685623, 1671742932, 131072}};
// var: 308382140307951901796343153,46
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2730

s21_decimal var_a = {{236113385, -882485981, -2116463107, 1703936}};
// var: 401,86309252643678611139907049
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, 401);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2731

s21_decimal var_a = {{-1216340648, 423156038, -1967820949, 1310720}};
// var: 429282730,86994523129575906648
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, 429282730);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2732

s21_decimal var_a = {{-1843672060, 1823287860, 706912351, 131072}};
// var: 130402312292722981563675310,12
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2733

s21_decimal var_a = {{1032331289, 647142882, 29949398, -2146566144}};
// var: -5524688828471,26212810645529
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2734

s21_decimal var_a = {{138603378, -1315680589, 1389106867, -2146435072}};
// var: -2562449887937,7431285387684722
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2735

s21_decimal var_a = {{-1301276544, 1054666600, 2024617951, -2146762752}};
// var: -373476091936649839,20091863168
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2736

s21_decimal var_a = {{-313151974, 1492454889, 806028894, 786432}};
// var: 14868608730043209,309272518170
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2737

s21_decimal var_a = {{1245320674, 1579837570, 74066996, -2146893824}};
// var: -1366294926305819762,091496930
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2738

s21_decimal var_a = {{326373267, 1709297569, -467419922, -2146107392}};
// var: -70605786,845518433884851933075
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, -70605786);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2739

s21_decimal var_a = {{-882316797, 692711245, 558154275, -2147352576}};
// var: -102961290675470734890626524,19
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2740

s21_decimal var_a = {{1573033174, -217534918, -78422633, 1638400}};
// var: 7778,1520291239327195302368470
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, 7778);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2741

s21_decimal var_a = {{-746686915, 1342057073, 1238412287, 524288}};
// var: 228446745217904336319,63870781
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2742

s21_decimal var_a = {{909514838, -1535374337, -464964610, 65536}};
// var: 7065107936211452618322202427,8
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2743

s21_decimal var_a = {{1029675844, -529797601, -1095362503, -2146762752}};
// var: -590222907696567073,45379466052
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2744

s21_decimal var_a = {{-1145351922, 680028891, -1072937367, 786432}};
// var: 59435961501016259,210252079374
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2745

s21_decimal var_a = {{176352397, 1930937276, -1308928116, -2146172928}};
// var: -550827005,55822841516831992973
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, -550827005);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2746

s21_decimal var_a = {{-632513549, -60822825, -1384272896, 1114112}};
// var: 536928346917,65091148348824563
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2747

s21_decimal var_a = {{343751362, -283133857, 1980432397, 65536}};
// var: 3653252959997284540651806585,8
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2748

s21_decimal var_a = {{-1590669504, 304560365, 1040359346, -2146631680}};
// var: -1919124260166192,1723212123968
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2749

s21_decimal var_a = {{-201541014, 1119815315, 413678816, -2146238464}};
// var: -763102725,2276754199976131178
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, -763102725);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2750

s21_decimal var_a = {{-2045159891, -910911088, 567873512, -2146369536}};
// var: -104754173566,37040687558776365
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2751

s21_decimal var_a = {{1454583464, 651312704, -1080092643, 1769472}};
// var: 59,303969955744167938877501096
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, 59);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2752

s21_decimal var_a = {{-1258463653, 394632718, -95154545, -2146566144}};
// var: -774728709768939,93368147549787
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2753

s21_decimal var_a = {{-1278487133, -32533864, 930490490, -2146238464}};
// var: -1716451995,0357608995685651875
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, -1716451995);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2754

s21_decimal var_a = {{-521486635, 1473791006, 685138832, -2145910784}};
// var: -12638,580695194168277112372949
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, -12638);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2755

s21_decimal var_a = {{-31700986, -755096671, 1924650100, 524288}};
// var: 355035278413431244593,98907910
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2756

s21_decimal var_a = {{-1413183822, 1855931203, 1175469629, -2146369536}};
// var: -216835874205,52479115208591026
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2757

s21_decimal var_a = {{1304807329, 284936696, -191552500, -2146566144}};
// var: -756946425713088,82499675211681
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2758

s21_decimal var_a = {{1594392132, -990260184, -675700923, -2146959360}};
// var: -667636805315076225031,89610052
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2759

s21_decimal var_a = {{1831130842, -1169682789, -365452344, 1245184}};
// var: 7248675666,6782067930379376346
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2760

s21_decimal var_a = {{-1418333344, -1008063881, 1200340760, 1769472}};
// var: 22,142378815079161881421017952
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, 22);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2761

s21_decimal var_a = {{1072622896, -1010814259, -1833278872, 196608}};
// var: 45410136360846735841384394,032
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2762

s21_decimal var_a = {{-262935980, 2121547067, 889507172, -2145779712}};
// var: -164,08511162725118081057942100
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, -164);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2763

s21_decimal var_a = {{-1876855075, 1093861814, 557853932, 720896}};
// var: 102905887188146719,14833901277
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2764

s21_decimal var_a = {{1024966546, 564542005, 1807972559, 393216}};
// var: 33351207090587432107640,340370
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2765

s21_decimal var_a = {{619998494, 1301099189, 1722437744, -2146631680}};
// var: -3177336825205382,8262941715742
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2766

s21_decimal var_a = {{-1245026419, -1974778254, 1408077936, 589824}};
// var: 25974453331194313361,920255885
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2767

s21_decimal var_a = {{-1734579648, 1023850333, -985598059, 1572864}};
// var: 61047,087364743854289848134208
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, 61047);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2768

s21_decimal var_a = {{1899438091, 620047059, 1022809135, -2146238464}};
// var: -1886749835,2260324571884232715
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, -1886749835);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2769

s21_decimal var_a = {{-1199521045, -830667021, -1543932113, 131072}};
// var: 507476419734507782065147583,79
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2770

s21_decimal var_a = {{-396319279, -1455545313, -1010546271, -2146369536}};
// var: -605868740906,81025631340242385
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2771

s21_decimal var_a = {{-545284447, -1380411586, 1851574970, 1245184}};
// var: 3415552961,7394362282678394529
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2772

s21_decimal var_a = {{954416813, -833873687, 1747794025, 65536}};
// var: 3224110908759899775987792247,7
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2773

s21_decimal var_a = {{-1071058036, -1966589798, -1213180226, -2146172928}};
// var: -568489373,79957528315562619788
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, -568489373);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2774

s21_decimal var_a = {{1270573364, -335393988, -296974509, 1048576}};
// var: 7374994976733,2021559017302324
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2775

s21_decimal var_a = {{-156776099, 1090510708, -109504878, 1310720}};
// var: 772081540,59659257967335164253
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, 772081540);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2776

s21_decimal var_a = {{851920328, 16889485, -1744980514, -2147418112}};
// var: -4703895355896873011451994260,0
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2777

s21_decimal var_a = {{1127414232, 1039413358, 953344022, -2145845248}};
// var: -1758,6093192499174778176993752
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, -1758);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2778

s21_decimal var_a = {{515263134, 1627128351, -875304074, 262144}};
// var: 6308165228149947382580053,8782
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2779

s21_decimal var_a = {{1754513199, -2117249950, 1489284431, 1245184}};
// var: 2747244876,0970376420456120111
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2780

s21_decimal var_a = {{1953479921, -510943700, -1394650586, -2146500608}};
// var: -53501400098325,541832558099697
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2781

s21_decimal var_a = {{-984855788, -1201934297, 628365824, -2146500608}};
// var: -11591303553278,094717322283796
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2782

s21_decimal var_a = {{-32469759, 2004489595, 1700097256, 786432}};
// var: 31361258990457087,703311748353
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2783

s21_decimal var_a = {{2028396140, 288802665, 1810801842, 851968}};
// var: 3340339814881623,7842447916652
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2784

s21_decimal var_a = {{545450840, -207031417, -143995335, -2146828288}};
// var: -7657191743926881692,4893703000
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2785

s21_decimal var_a = {{91328153, -1953976889, -1370887078, -2145910784}};
// var: -53939,759442497310996401589913
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, -53939);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2786

s21_decimal var_a = {{2127174597, -565603471, -1347672643, -2146500608}};
// var: -54367990189721,095018251951045
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2787

s21_decimal var_a = {{-639871651, 925974731, -1087946562, 655360}};
// var: 5915909072315518751,6577699165
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2788

s21_decimal var_a = {{-918233094, -1292991398, 135796776, -2146631680}};
// var: -250500838580025,1778525356026
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2789

s21_decimal var_a = {{-254189747, 310817879, -1757348797, 196608}};
// var: 46810799009098930363114807,117
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2790

s21_decimal var_a = {{1813343356, 853029914, 1906681760, 1048576}};
// var: 3517207046039,3833188958760060
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2791

s21_decimal var_a = {{1979110346, -325894165, 1345899331, 1114112}};
// var: 248274605249,80939503340803018
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2792

s21_decimal var_a = {{-336087011, 1864671451, -468461643, -2145779712}};
// var: -705,86570485502550842508032029
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, -705);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2793

s21_decimal var_a = {{-495365440, -305156020, 717097178, 589824}};
// var: 13228108135681452406,910571200
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2794

s21_decimal var_a = {{-377557576, 1380797050, -620249469, -2145976320}};
// var: -677865,79303697569519572544952
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, -677865);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2795

s21_decimal var_a = {{277080781, 1926099292, -2006513541, 851968}};
// var: 4221452075127715,3643267353293
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2796

s21_decimal var_a = {{435328774, 1860450962, 36731926, -2147024896}};
// var: -67758444624701383348,9159942
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2797

s21_decimal var_a = {{-764471729, -1023032792, -1863806883, -2147418112}};
// var: -4484699395479786764166385415,9
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2798

s21_decimal var_a = {{-862823794, 456364123, -541486664, -2146566144}};
// var: -692394966060896,51370845166222
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2799

s21_decimal var_a = {{-1935367849, 1742344771, 520764325, 262144}};
// var: 960640623347641870552010,7863
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2800

s21_decimal var_a = {{-176585239, -1922087531, -2136653977, 851968}};
// var: 3981385343666308,3982464321001
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2801

s21_decimal var_a = {{394676406, 474932867, -1819820096, 327680}};
// var: 456584069451986114275530,69238
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2802

s21_decimal var_a = {{8146679, -1438811910, 82937938, 851968}};
// var: 152993492855428,4197108010743
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2803

s21_decimal var_a = {{-744402987, -820065056, 2076125415, -2146041856}};
// var: -3829775,4210353624919379627989
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, -3829775);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2804

s21_decimal var_a = {{-1002111004, -233906239, -2010421636, -2147287040}};
// var: -42142429132166000675045834,724
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2805

s21_decimal var_a = {{-456674892, 659351097, -1538819516, 1310720}};
// var: 508419527,29814628453268828596
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(res_int, 508419527);
ck_assert_int_eq(return_res, 0);

#test from_decimal_to_int_2806

s21_decimal var_a = {{1747932793, 150497007, -999250715, -2146369536}};
// var: -607952403098,34435163885360761
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_decimal_to_int_2807

s21_decimal var_a = {{-1803674673, -661764683, 424196618, 196608}};
// var: 7825046464783620914871671,759
int res_int;
int return_res = s21_from_decimal_to_int(var_a, &res_int);
ck_assert_int_eq(return_res, 1);

#test from_int_to_decimal_2462
s21_decimal s21_res;
int res_int = 34452;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 34452
ck_assert_int_eq(s21_res.bits[0], 34452);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2465
s21_decimal s21_res;
int res_int = 0;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 0
ck_assert_int_eq(s21_res.bits[0], 0);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2466
s21_decimal s21_res;
int res_int = 0;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 0
ck_assert_int_eq(s21_res.bits[0], 0);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2467
s21_decimal s21_res;
int res_int = 2147483647;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 2147483647
ck_assert_int_eq(s21_res.bits[0], 2147483647);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2472
s21_decimal s21_res;
int res_int = 437141871;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 437141871
ck_assert_int_eq(s21_res.bits[0], 437141871);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2475
s21_decimal s21_res;
int res_int = 1034351164;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 1034351164
ck_assert_int_eq(s21_res.bits[0], 1034351164);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2477
s21_decimal s21_res;
int res_int = 50119939;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 50119939
ck_assert_int_eq(s21_res.bits[0], 50119939);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2478
s21_decimal s21_res;
int res_int = 719512722;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 719512722
ck_assert_int_eq(s21_res.bits[0], 719512722);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2480
s21_decimal s21_res;
int res_int = 1627192436;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 1627192436
ck_assert_int_eq(s21_res.bits[0], 1627192436);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2481
s21_decimal s21_res;
int res_int = 1065704243;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 1065704243
ck_assert_int_eq(s21_res.bits[0], 1065704243);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2482
s21_decimal s21_res;
int res_int = 2143224098;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 2143224098
ck_assert_int_eq(s21_res.bits[0], 2143224098);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2483
s21_decimal s21_res;
int res_int = 993289479;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 993289479
ck_assert_int_eq(s21_res.bits[0], 993289479);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2484
s21_decimal s21_res;
int res_int = 2130766265;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 2130766265
ck_assert_int_eq(s21_res.bits[0], 2130766265);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2486
s21_decimal s21_res;
int res_int = 1705703852;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 1705703852
ck_assert_int_eq(s21_res.bits[0], 1705703852);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2488
s21_decimal s21_res;
int res_int = 572961715;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 572961715
ck_assert_int_eq(s21_res.bits[0], 572961715);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2489
s21_decimal s21_res;
int res_int = 1613076957;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 1613076957
ck_assert_int_eq(s21_res.bits[0], 1613076957);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2492
s21_decimal s21_res;
int res_int = 1458734628;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 1458734628
ck_assert_int_eq(s21_res.bits[0], 1458734628);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2493
s21_decimal s21_res;
int res_int = 1707683418;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 1707683418
ck_assert_int_eq(s21_res.bits[0], 1707683418);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2494
s21_decimal s21_res;
int res_int = 1271400042;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 1271400042
ck_assert_int_eq(s21_res.bits[0], 1271400042);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2495
s21_decimal s21_res;
int res_int = 2064757962;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 2064757962
ck_assert_int_eq(s21_res.bits[0], 2064757962);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2498
s21_decimal s21_res;
int res_int = 166019020;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 166019020
ck_assert_int_eq(s21_res.bits[0], 166019020);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2500
s21_decimal s21_res;
int res_int = 1515682947;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 1515682947
ck_assert_int_eq(s21_res.bits[0], 1515682947);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2503
s21_decimal s21_res;
int res_int = 128616638;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 128616638
ck_assert_int_eq(s21_res.bits[0], 128616638);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2504
s21_decimal s21_res;
int res_int = 1829972443;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 1829972443
ck_assert_int_eq(s21_res.bits[0], 1829972443);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2505
s21_decimal s21_res;
int res_int = 1045750373;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 1045750373
ck_assert_int_eq(s21_res.bits[0], 1045750373);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2506
s21_decimal s21_res;
int res_int = 1752565689;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 1752565689
ck_assert_int_eq(s21_res.bits[0], 1752565689);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2508
s21_decimal s21_res;
int res_int = 1347397612;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 1347397612
ck_assert_int_eq(s21_res.bits[0], 1347397612);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2509
s21_decimal s21_res;
int res_int = 1911969818;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 1911969818
ck_assert_int_eq(s21_res.bits[0], 1911969818);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2510
s21_decimal s21_res;
int res_int = 1263783805;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 1263783805
ck_assert_int_eq(s21_res.bits[0], 1263783805);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2513
s21_decimal s21_res;
int res_int = 1133827270;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 1133827270
ck_assert_int_eq(s21_res.bits[0], 1133827270);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2514
s21_decimal s21_res;
int res_int = 1842741048;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 1842741048
ck_assert_int_eq(s21_res.bits[0], 1842741048);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2518
s21_decimal s21_res;
int res_int = 2038434085;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 2038434085
ck_assert_int_eq(s21_res.bits[0], 2038434085);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2521
s21_decimal s21_res;
int res_int = 1063352594;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 1063352594
ck_assert_int_eq(s21_res.bits[0], 1063352594);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2523
s21_decimal s21_res;
int res_int = 208589584;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 208589584
ck_assert_int_eq(s21_res.bits[0], 208589584);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2524
s21_decimal s21_res;
int res_int = 236693532;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 236693532
ck_assert_int_eq(s21_res.bits[0], 236693532);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2525
s21_decimal s21_res;
int res_int = 728718061;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 728718061
ck_assert_int_eq(s21_res.bits[0], 728718061);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2527
s21_decimal s21_res;
int res_int = 1682005549;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 1682005549
ck_assert_int_eq(s21_res.bits[0], 1682005549);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2528
s21_decimal s21_res;
int res_int = 2052399332;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 2052399332
ck_assert_int_eq(s21_res.bits[0], 2052399332);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2530
s21_decimal s21_res;
int res_int = 774483241;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 774483241
ck_assert_int_eq(s21_res.bits[0], 774483241);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2531
s21_decimal s21_res;
int res_int = 2054142868;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 2054142868
ck_assert_int_eq(s21_res.bits[0], 2054142868);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2532
s21_decimal s21_res;
int res_int = 2089439326;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 2089439326
ck_assert_int_eq(s21_res.bits[0], 2089439326);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2533
s21_decimal s21_res;
int res_int = 1619167992;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 1619167992
ck_assert_int_eq(s21_res.bits[0], 1619167992);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2537
s21_decimal s21_res;
int res_int = 755066073;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 755066073
ck_assert_int_eq(s21_res.bits[0], 755066073);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2538
s21_decimal s21_res;
int res_int = 113734653;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 113734653
ck_assert_int_eq(s21_res.bits[0], 113734653);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2539
s21_decimal s21_res;
int res_int = 1140207233;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 1140207233
ck_assert_int_eq(s21_res.bits[0], 1140207233);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2540
s21_decimal s21_res;
int res_int = 1006214285;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 1006214285
ck_assert_int_eq(s21_res.bits[0], 1006214285);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2541
s21_decimal s21_res;
int res_int = 1518897754;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 1518897754
ck_assert_int_eq(s21_res.bits[0], 1518897754);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2547
s21_decimal s21_res;
int res_int = 800821772;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 800821772
ck_assert_int_eq(s21_res.bits[0], 800821772);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2549
s21_decimal s21_res;
int res_int = 769789223;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 769789223
ck_assert_int_eq(s21_res.bits[0], 769789223);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2550
s21_decimal s21_res;
int res_int = 1108224976;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 1108224976
ck_assert_int_eq(s21_res.bits[0], 1108224976);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2553
s21_decimal s21_res;
int res_int = 166456524;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 166456524
ck_assert_int_eq(s21_res.bits[0], 166456524);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2554
s21_decimal s21_res;
int res_int = 1569400369;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 1569400369
ck_assert_int_eq(s21_res.bits[0], 1569400369);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2555
s21_decimal s21_res;
int res_int = 149021735;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 149021735
ck_assert_int_eq(s21_res.bits[0], 149021735);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2560
s21_decimal s21_res;
int res_int = 1723338685;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 1723338685
ck_assert_int_eq(s21_res.bits[0], 1723338685);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2561
s21_decimal s21_res;
int res_int = 252533634;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 252533634
ck_assert_int_eq(s21_res.bits[0], 252533634);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2563
s21_decimal s21_res;
int res_int = 481825123;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 481825123
ck_assert_int_eq(s21_res.bits[0], 481825123);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2564
s21_decimal s21_res;
int res_int = 309234278;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 309234278
ck_assert_int_eq(s21_res.bits[0], 309234278);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);

#test from_int_to_decimal_2565
s21_decimal s21_res;
int res_int = 407911574;
int return_res = s21_from_int_to_decimal(res_int, &s21_res);
// var: 407911574
ck_assert_int_eq(s21_res.bits[0], 407911574);
ck_assert_int_eq(s21_res.bits[1], 0);
ck_assert_int_eq(s21_res.bits[2], 0);
ck_assert_int_eq(s21_res.bits[3], 0);
ck_assert_int_eq(return_res, 0);
